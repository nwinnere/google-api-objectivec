// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Play EMM API (androidenterprise/v1)
// Description:
//   Manages the deployment of apps to Android for Work users.
// Documentation:
//   https://developers.google.com/android/work/play/emm-api

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRAndroidEnterprise_Collection;
@class GTLRAndroidEnterprise_DeviceState;
@class GTLRAndroidEnterprise_Enterprise;
@class GTLRAndroidEnterprise_EnterpriseAccount;
@class GTLRAndroidEnterprise_Entitlement;
@class GTLRAndroidEnterprise_Install;
@class GTLRAndroidEnterprise_ProductPermissions;
@class GTLRAndroidEnterprise_ProductsApproveRequest;
@class GTLRAndroidEnterprise_ProductSet;
@class GTLRAndroidEnterprise_StoreCluster;
@class GTLRAndroidEnterprise_StoreLayout;
@class GTLRAndroidEnterprise_StorePage;
@class GTLRAndroidEnterprise_User;

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Android Enterprise query classes.
 */
@interface GTLRAndroidEnterpriseQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(copy, nullable) NSString *fields;

@end

/**
 *  Deletes a collection.
 *
 *  Method: androidenterprise.collections.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_CollectionsDelete : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForCollectionsDeleteWithenterpriseId:collectionId:]

/** The ID of the collection. */
@property(copy, nullable) NSString *collectionId;

/** The ID of the enterprise. */
@property(copy, nullable) NSString *enterpriseId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a collection.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param collectionId The ID of the collection.
 *
 *  @returns GTLRAndroidEnterpriseQuery_CollectionsDelete
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                         collectionId:(NSString *)collectionId;

@end

/**
 *  Retrieves the details of a collection.
 *
 *  Method: androidenterprise.collections.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_CollectionsGet : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForCollectionsGetWithenterpriseId:collectionId:]

/** The ID of the collection. */
@property(copy, nullable) NSString *collectionId;

/** The ID of the enterprise. */
@property(copy, nullable) NSString *enterpriseId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_Collection.
 *
 *  Retrieves the details of a collection.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param collectionId The ID of the collection.
 *
 *  @returns GTLRAndroidEnterpriseQuery_CollectionsGet
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                         collectionId:(NSString *)collectionId;

@end

/**
 *  Creates a new collection.
 *
 *  Method: androidenterprise.collections.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_CollectionsInsert : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForCollectionsInsertWithObject:enterpriseId:]

/** The ID of the enterprise. */
@property(copy, nullable) NSString *enterpriseId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_Collection.
 *
 *  Creates a new collection.
 *
 *  @param object The @c GTLRAndroidEnterprise_Collection to include in the
 *    query.
 *  @param enterpriseId The ID of the enterprise.
 *
 *  @returns GTLRAndroidEnterpriseQuery_CollectionsInsert
 */
+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_Collection *)object
                   enterpriseId:(NSString *)enterpriseId;

@end

/**
 *  Retrieves the IDs of all the collections for an enterprise.
 *
 *  Method: androidenterprise.collections.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_CollectionsList : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForCollectionsListWithenterpriseId:]

/** The ID of the enterprise. */
@property(copy, nullable) NSString *enterpriseId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_CollectionsListResponse.
 *
 *  Retrieves the IDs of all the collections for an enterprise.
 *
 *  @param enterpriseId The ID of the enterprise.
 *
 *  @returns GTLRAndroidEnterpriseQuery_CollectionsList
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId;

@end

/**
 *  Updates a collection. This method supports patch semantics.
 *
 *  Method: androidenterprise.collections.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_CollectionsPatch : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForCollectionsPatchWithObject:enterpriseId:collectionId:]

/** The ID of the collection. */
@property(copy, nullable) NSString *collectionId;

/** The ID of the enterprise. */
@property(copy, nullable) NSString *enterpriseId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_Collection.
 *
 *  Updates a collection. This method supports patch semantics.
 *
 *  @param object The @c GTLRAndroidEnterprise_Collection to include in the
 *    query.
 *  @param enterpriseId The ID of the enterprise.
 *  @param collectionId The ID of the collection.
 *
 *  @returns GTLRAndroidEnterpriseQuery_CollectionsPatch
 */
+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_Collection *)object
                   enterpriseId:(NSString *)enterpriseId
                   collectionId:(NSString *)collectionId;

@end

/**
 *  Updates a collection.
 *
 *  Method: androidenterprise.collections.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_CollectionsUpdate : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForCollectionsUpdateWithObject:enterpriseId:collectionId:]

/** The ID of the collection. */
@property(copy, nullable) NSString *collectionId;

/** The ID of the enterprise. */
@property(copy, nullable) NSString *enterpriseId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_Collection.
 *
 *  Updates a collection.
 *
 *  @param object The @c GTLRAndroidEnterprise_Collection to include in the
 *    query.
 *  @param enterpriseId The ID of the enterprise.
 *  @param collectionId The ID of the collection.
 *
 *  @returns GTLRAndroidEnterpriseQuery_CollectionsUpdate
 */
+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_Collection *)object
                   enterpriseId:(NSString *)enterpriseId
                   collectionId:(NSString *)collectionId;

@end

/**
 *  Removes the user from the list of those specifically allowed to see the
 *  collection. If the collection's visibility is set to viewersOnly then only
 *  such users will see the collection.
 *
 *  Method: androidenterprise.collectionviewers.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_CollectionviewersDelete : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForCollectionviewersDeleteWithenterpriseId:collectionId:userId:]

/** The ID of the collection. */
@property(copy, nullable) NSString *collectionId;

/** The ID of the enterprise. */
@property(copy, nullable) NSString *enterpriseId;

/** The ID of the user. */
@property(copy, nullable) NSString *userId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Removes the user from the list of those specifically allowed to see the
 *  collection. If the collection's visibility is set to viewersOnly then only
 *  such users will see the collection.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param collectionId The ID of the collection.
 *  @param userId The ID of the user.
 *
 *  @returns GTLRAndroidEnterpriseQuery_CollectionviewersDelete
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                         collectionId:(NSString *)collectionId
                               userId:(NSString *)userId;

@end

/**
 *  Retrieves the ID of the user if they have been specifically allowed to see
 *  the collection. If the collection's visibility is set to viewersOnly then
 *  only these users will see the collection.
 *
 *  Method: androidenterprise.collectionviewers.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_CollectionviewersGet : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForCollectionviewersGetWithenterpriseId:collectionId:userId:]

/** The ID of the collection. */
@property(copy, nullable) NSString *collectionId;

/** The ID of the enterprise. */
@property(copy, nullable) NSString *enterpriseId;

/** The ID of the user. */
@property(copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_User.
 *
 *  Retrieves the ID of the user if they have been specifically allowed to see
 *  the collection. If the collection's visibility is set to viewersOnly then
 *  only these users will see the collection.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param collectionId The ID of the collection.
 *  @param userId The ID of the user.
 *
 *  @returns GTLRAndroidEnterpriseQuery_CollectionviewersGet
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                         collectionId:(NSString *)collectionId
                               userId:(NSString *)userId;

@end

/**
 *  Retrieves the IDs of the users who have been specifically allowed to see the
 *  collection. If the collection's visibility is set to viewersOnly then only
 *  these users will see the collection.
 *
 *  Method: androidenterprise.collectionviewers.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_CollectionviewersList : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForCollectionviewersListWithenterpriseId:collectionId:]

/** The ID of the collection. */
@property(copy, nullable) NSString *collectionId;

/** The ID of the enterprise. */
@property(copy, nullable) NSString *enterpriseId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_CollectionViewersListResponse.
 *
 *  Retrieves the IDs of the users who have been specifically allowed to see the
 *  collection. If the collection's visibility is set to viewersOnly then only
 *  these users will see the collection.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param collectionId The ID of the collection.
 *
 *  @returns GTLRAndroidEnterpriseQuery_CollectionviewersList
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                         collectionId:(NSString *)collectionId;

@end

/**
 *  Adds the user to the list of those specifically allowed to see the
 *  collection. If the collection's visibility is set to viewersOnly then only
 *  such users will see the collection. This method supports patch semantics.
 *
 *  Method: androidenterprise.collectionviewers.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_CollectionviewersPatch : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForCollectionviewersPatchWithObject:enterpriseId:collectionId:userId:]

/** The ID of the collection. */
@property(copy, nullable) NSString *collectionId;

/** The ID of the enterprise. */
@property(copy, nullable) NSString *enterpriseId;

/** The ID of the user. */
@property(copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_User.
 *
 *  Adds the user to the list of those specifically allowed to see the
 *  collection. If the collection's visibility is set to viewersOnly then only
 *  such users will see the collection. This method supports patch semantics.
 *
 *  @param object The @c GTLRAndroidEnterprise_User to include in the query.
 *  @param enterpriseId The ID of the enterprise.
 *  @param collectionId The ID of the collection.
 *  @param userId The ID of the user.
 *
 *  @returns GTLRAndroidEnterpriseQuery_CollectionviewersPatch
 */
+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_User *)object
                   enterpriseId:(NSString *)enterpriseId
                   collectionId:(NSString *)collectionId
                         userId:(NSString *)userId;

@end

/**
 *  Adds the user to the list of those specifically allowed to see the
 *  collection. If the collection's visibility is set to viewersOnly then only
 *  such users will see the collection.
 *
 *  Method: androidenterprise.collectionviewers.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_CollectionviewersUpdate : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForCollectionviewersUpdateWithObject:enterpriseId:collectionId:userId:]

/** The ID of the collection. */
@property(copy, nullable) NSString *collectionId;

/** The ID of the enterprise. */
@property(copy, nullable) NSString *enterpriseId;

/** The ID of the user. */
@property(copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_User.
 *
 *  Adds the user to the list of those specifically allowed to see the
 *  collection. If the collection's visibility is set to viewersOnly then only
 *  such users will see the collection.
 *
 *  @param object The @c GTLRAndroidEnterprise_User to include in the query.
 *  @param enterpriseId The ID of the enterprise.
 *  @param collectionId The ID of the collection.
 *  @param userId The ID of the user.
 *
 *  @returns GTLRAndroidEnterpriseQuery_CollectionviewersUpdate
 */
+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_User *)object
                   enterpriseId:(NSString *)enterpriseId
                   collectionId:(NSString *)collectionId
                         userId:(NSString *)userId;

@end

/**
 *  Retrieves the details of a device.
 *
 *  Method: androidenterprise.devices.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_DevicesGet : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForDevicesGetWithenterpriseId:userId:deviceId:]

/** The ID of the device. */
@property(copy, nullable) NSString *deviceId;

/** The ID of the enterprise. */
@property(copy, nullable) NSString *enterpriseId;

/** The ID of the user. */
@property(copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_Device.
 *
 *  Retrieves the details of a device.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param userId The ID of the user.
 *  @param deviceId The ID of the device.
 *
 *  @returns GTLRAndroidEnterpriseQuery_DevicesGet
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               userId:(NSString *)userId
                             deviceId:(NSString *)deviceId;

@end

/**
 *  Retrieves whether a device is enabled or disabled for access by the user to
 *  Google services. The device state takes effect only if enforcing EMM
 *  policies on Android devices is enabled in the Google Admin Console.
 *  Otherwise, the device state is ignored and all devices are allowed access to
 *  Google services.
 *
 *  Method: androidenterprise.devices.getState
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_DevicesGetState : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForDevicesGetStateWithenterpriseId:userId:deviceId:]

/** The ID of the device. */
@property(copy, nullable) NSString *deviceId;

/** The ID of the enterprise. */
@property(copy, nullable) NSString *enterpriseId;

/** The ID of the user. */
@property(copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_DeviceState.
 *
 *  Retrieves whether a device is enabled or disabled for access by the user to
 *  Google services. The device state takes effect only if enforcing EMM
 *  policies on Android devices is enabled in the Google Admin Console.
 *  Otherwise, the device state is ignored and all devices are allowed access to
 *  Google services.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param userId The ID of the user.
 *  @param deviceId The ID of the device.
 *
 *  @returns GTLRAndroidEnterpriseQuery_DevicesGetState
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               userId:(NSString *)userId
                             deviceId:(NSString *)deviceId;

@end

/**
 *  Retrieves the IDs of all of a user's devices.
 *
 *  Method: androidenterprise.devices.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_DevicesList : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForDevicesListWithenterpriseId:userId:]

/** The ID of the enterprise. */
@property(copy, nullable) NSString *enterpriseId;

/** The ID of the user. */
@property(copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_DevicesListResponse.
 *
 *  Retrieves the IDs of all of a user's devices.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param userId The ID of the user.
 *
 *  @returns GTLRAndroidEnterpriseQuery_DevicesList
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               userId:(NSString *)userId;

@end

/**
 *  Sets whether a device is enabled or disabled for access by the user to
 *  Google services. The device state takes effect only if enforcing EMM
 *  policies on Android devices is enabled in the Google Admin Console.
 *  Otherwise, the device state is ignored and all devices are allowed access to
 *  Google services.
 *
 *  Method: androidenterprise.devices.setState
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_DevicesSetState : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForDevicesSetStateWithObject:enterpriseId:userId:deviceId:]

/** The ID of the device. */
@property(copy, nullable) NSString *deviceId;

/** The ID of the enterprise. */
@property(copy, nullable) NSString *enterpriseId;

/** The ID of the user. */
@property(copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_DeviceState.
 *
 *  Sets whether a device is enabled or disabled for access by the user to
 *  Google services. The device state takes effect only if enforcing EMM
 *  policies on Android devices is enabled in the Google Admin Console.
 *  Otherwise, the device state is ignored and all devices are allowed access to
 *  Google services.
 *
 *  @param object The @c GTLRAndroidEnterprise_DeviceState to include in the
 *    query.
 *  @param enterpriseId The ID of the enterprise.
 *  @param userId The ID of the user.
 *  @param deviceId The ID of the device.
 *
 *  @returns GTLRAndroidEnterpriseQuery_DevicesSetState
 */
+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_DeviceState *)object
                   enterpriseId:(NSString *)enterpriseId
                         userId:(NSString *)userId
                       deviceId:(NSString *)deviceId;

@end

/**
 *  Deletes the binding between the EMM and enterprise. This is now deprecated;
 *  use this to unenroll customers that were previously enrolled with the
 *  'insert' call, then enroll them again with the 'enroll' call.
 *
 *  Method: androidenterprise.enterprises.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_EnterprisesDelete : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForEnterprisesDeleteWithenterpriseId:]

/** The ID of the enterprise. */
@property(copy, nullable) NSString *enterpriseId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes the binding between the EMM and enterprise. This is now deprecated;
 *  use this to unenroll customers that were previously enrolled with the
 *  'insert' call, then enroll them again with the 'enroll' call.
 *
 *  @param enterpriseId The ID of the enterprise.
 *
 *  @returns GTLRAndroidEnterpriseQuery_EnterprisesDelete
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId;

@end

/**
 *  Enrolls an enterprise with the calling EMM.
 *
 *  Method: androidenterprise.enterprises.enroll
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_EnterprisesEnroll : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForEnterprisesEnrollWithObject:token:]

/** The token provided by the enterprise to register the EMM. */
@property(copy, nullable) NSString *token;

/**
 *  Fetches a @c GTLRAndroidEnterprise_Enterprise.
 *
 *  Enrolls an enterprise with the calling EMM.
 *
 *  @param object The @c GTLRAndroidEnterprise_Enterprise to include in the
 *    query.
 *  @param token The token provided by the enterprise to register the EMM.
 *
 *  @returns GTLRAndroidEnterpriseQuery_EnterprisesEnroll
 */
+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_Enterprise *)object
                          token:(NSString *)token;

@end

/**
 *  Retrieves the name and domain of an enterprise.
 *
 *  Method: androidenterprise.enterprises.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_EnterprisesGet : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForEnterprisesGetWithenterpriseId:]

/** The ID of the enterprise. */
@property(copy, nullable) NSString *enterpriseId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_Enterprise.
 *
 *  Retrieves the name and domain of an enterprise.
 *
 *  @param enterpriseId The ID of the enterprise.
 *
 *  @returns GTLRAndroidEnterpriseQuery_EnterprisesGet
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId;

@end

/**
 *  Returns the store layout resource.
 *
 *  Method: androidenterprise.enterprises.getStoreLayout
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_EnterprisesGetStoreLayout : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForEnterprisesGetStoreLayoutWithenterpriseId:]

/** The ID of the enterprise. */
@property(copy, nullable) NSString *enterpriseId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_StoreLayout.
 *
 *  Returns the store layout resource.
 *
 *  @param enterpriseId The ID of the enterprise.
 *
 *  @returns GTLRAndroidEnterpriseQuery_EnterprisesGetStoreLayout
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId;

@end

/**
 *  Establishes the binding between the EMM and an enterprise. This is now
 *  deprecated; use enroll instead.
 *
 *  Method: androidenterprise.enterprises.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_EnterprisesInsert : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForEnterprisesInsertWithObject:token:]

/** The token provided by the enterprise to register the EMM. */
@property(copy, nullable) NSString *token;

/**
 *  Fetches a @c GTLRAndroidEnterprise_Enterprise.
 *
 *  Establishes the binding between the EMM and an enterprise. This is now
 *  deprecated; use enroll instead.
 *
 *  @param object The @c GTLRAndroidEnterprise_Enterprise to include in the
 *    query.
 *  @param token The token provided by the enterprise to register the EMM.
 *
 *  @returns GTLRAndroidEnterpriseQuery_EnterprisesInsert
 */
+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_Enterprise *)object
                          token:(NSString *)token;

@end

/**
 *  Looks up an enterprise by domain name.
 *
 *  Method: androidenterprise.enterprises.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_EnterprisesList : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForEnterprisesListWithdomain:]

/** The exact primary domain name of the enterprise to look up. */
@property(copy, nullable) NSString *domain;

/**
 *  Fetches a @c GTLRAndroidEnterprise_EnterprisesListResponse.
 *
 *  Looks up an enterprise by domain name.
 *
 *  @param domain The exact primary domain name of the enterprise to look up.
 *
 *  @returns GTLRAndroidEnterpriseQuery_EnterprisesList
 */
+ (instancetype)queryWithDomain:(NSString *)domain;

@end

/**
 *  Sends a test push notification to validate the EMM integration with the
 *  Google Cloud Pub/Sub service for this enterprise.
 *
 *  Method: androidenterprise.enterprises.sendTestPushNotification
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_EnterprisesSendTestPushNotification : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForEnterprisesSendTestPushNotificationWithenterpriseId:]

/** The ID of the enterprise. */
@property(copy, nullable) NSString *enterpriseId;

/**
 *  Fetches a @c
 *  GTLRAndroidEnterprise_EnterprisesSendTestPushNotificationResponse.
 *
 *  Sends a test push notification to validate the EMM integration with the
 *  Google Cloud Pub/Sub service for this enterprise.
 *
 *  @param enterpriseId The ID of the enterprise.
 *
 *  @returns GTLRAndroidEnterpriseQuery_EnterprisesSendTestPushNotification
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId;

@end

/**
 *  Set the account that will be used to authenticate to the API as the
 *  enterprise.
 *
 *  Method: androidenterprise.enterprises.setAccount
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_EnterprisesSetAccount : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForEnterprisesSetAccountWithObject:enterpriseId:]

/** The ID of the enterprise. */
@property(copy, nullable) NSString *enterpriseId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_EnterpriseAccount.
 *
 *  Set the account that will be used to authenticate to the API as the
 *  enterprise.
 *
 *  @param object The @c GTLRAndroidEnterprise_EnterpriseAccount to include in
 *    the query.
 *  @param enterpriseId The ID of the enterprise.
 *
 *  @returns GTLRAndroidEnterpriseQuery_EnterprisesSetAccount
 */
+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_EnterpriseAccount *)object
                   enterpriseId:(NSString *)enterpriseId;

@end

/**
 *  Sets the store layout resource.
 *
 *  Method: androidenterprise.enterprises.setStoreLayout
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_EnterprisesSetStoreLayout : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForEnterprisesSetStoreLayoutWithObject:enterpriseId:]

/** The ID of the enterprise. */
@property(copy, nullable) NSString *enterpriseId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_StoreLayout.
 *
 *  Sets the store layout resource.
 *
 *  @param object The @c GTLRAndroidEnterprise_StoreLayout to include in the
 *    query.
 *  @param enterpriseId The ID of the enterprise.
 *
 *  @returns GTLRAndroidEnterpriseQuery_EnterprisesSetStoreLayout
 */
+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_StoreLayout *)object
                   enterpriseId:(NSString *)enterpriseId;

@end

/**
 *  Unenrolls an enterprise from the calling EMM.
 *
 *  Method: androidenterprise.enterprises.unenroll
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_EnterprisesUnenroll : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForEnterprisesUnenrollWithenterpriseId:]

/** The ID of the enterprise. */
@property(copy, nullable) NSString *enterpriseId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Unenrolls an enterprise from the calling EMM.
 *
 *  @param enterpriseId The ID of the enterprise.
 *
 *  @returns GTLRAndroidEnterpriseQuery_EnterprisesUnenroll
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId;

@end

/**
 *  Removes an entitlement to an app for a user and uninstalls it.
 *
 *  Method: androidenterprise.entitlements.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_EntitlementsDelete : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForEntitlementsDeleteWithenterpriseId:userId:entitlementId:]

/** The ID of the enterprise. */
@property(copy, nullable) NSString *enterpriseId;

/**
 *  The ID of the entitlement (a product ID), e.g. "app:com.google.android.gm".
 */
@property(copy, nullable) NSString *entitlementId;

/** The ID of the user. */
@property(copy, nullable) NSString *userId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Removes an entitlement to an app for a user and uninstalls it.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param userId The ID of the user.
 *  @param entitlementId The ID of the entitlement (a product ID), e.g.
 *    "app:com.google.android.gm".
 *
 *  @returns GTLRAndroidEnterpriseQuery_EntitlementsDelete
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               userId:(NSString *)userId
                        entitlementId:(NSString *)entitlementId;

@end

/**
 *  Retrieves details of an entitlement.
 *
 *  Method: androidenterprise.entitlements.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_EntitlementsGet : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForEntitlementsGetWithenterpriseId:userId:entitlementId:]

/** The ID of the enterprise. */
@property(copy, nullable) NSString *enterpriseId;

/**
 *  The ID of the entitlement (a product ID), e.g. "app:com.google.android.gm".
 */
@property(copy, nullable) NSString *entitlementId;

/** The ID of the user. */
@property(copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_Entitlement.
 *
 *  Retrieves details of an entitlement.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param userId The ID of the user.
 *  @param entitlementId The ID of the entitlement (a product ID), e.g.
 *    "app:com.google.android.gm".
 *
 *  @returns GTLRAndroidEnterpriseQuery_EntitlementsGet
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               userId:(NSString *)userId
                        entitlementId:(NSString *)entitlementId;

@end

/**
 *  List of all entitlements for the specified user. Only the ID is set.
 *
 *  Method: androidenterprise.entitlements.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_EntitlementsList : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForEntitlementsListWithenterpriseId:userId:]

/** The ID of the enterprise. */
@property(copy, nullable) NSString *enterpriseId;

/** The ID of the user. */
@property(copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_EntitlementsListResponse.
 *
 *  List of all entitlements for the specified user. Only the ID is set.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param userId The ID of the user.
 *
 *  @returns GTLRAndroidEnterpriseQuery_EntitlementsList
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               userId:(NSString *)userId;

@end

/**
 *  Adds or updates an entitlement to an app for a user. This method supports
 *  patch semantics.
 *
 *  Method: androidenterprise.entitlements.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_EntitlementsPatch : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForEntitlementsPatchWithObject:enterpriseId:userId:entitlementId:]

/** The ID of the enterprise. */
@property(copy, nullable) NSString *enterpriseId;

/**
 *  The ID of the entitlement (a product ID), e.g. "app:com.google.android.gm".
 */
@property(copy, nullable) NSString *entitlementId;

/**
 *  Set to true to also install the product on all the user's devices where
 *  possible. Failure to install on one or more devices will not prevent this
 *  operation from returning successfully, as long as the entitlement was
 *  successfully assigned to the user.
 */
@property(assign) BOOL install;

/** The ID of the user. */
@property(copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_Entitlement.
 *
 *  Adds or updates an entitlement to an app for a user. This method supports
 *  patch semantics.
 *
 *  @param object The @c GTLRAndroidEnterprise_Entitlement to include in the
 *    query.
 *  @param enterpriseId The ID of the enterprise.
 *  @param userId The ID of the user.
 *  @param entitlementId The ID of the entitlement (a product ID), e.g.
 *    "app:com.google.android.gm".
 *
 *  @returns GTLRAndroidEnterpriseQuery_EntitlementsPatch
 */
+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_Entitlement *)object
                   enterpriseId:(NSString *)enterpriseId
                         userId:(NSString *)userId
                  entitlementId:(NSString *)entitlementId;

@end

/**
 *  Adds or updates an entitlement to an app for a user.
 *
 *  Method: androidenterprise.entitlements.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_EntitlementsUpdate : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForEntitlementsUpdateWithObject:enterpriseId:userId:entitlementId:]

/** The ID of the enterprise. */
@property(copy, nullable) NSString *enterpriseId;

/**
 *  The ID of the entitlement (a product ID), e.g. "app:com.google.android.gm".
 */
@property(copy, nullable) NSString *entitlementId;

/**
 *  Set to true to also install the product on all the user's devices where
 *  possible. Failure to install on one or more devices will not prevent this
 *  operation from returning successfully, as long as the entitlement was
 *  successfully assigned to the user.
 */
@property(assign) BOOL install;

/** The ID of the user. */
@property(copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_Entitlement.
 *
 *  Adds or updates an entitlement to an app for a user.
 *
 *  @param object The @c GTLRAndroidEnterprise_Entitlement to include in the
 *    query.
 *  @param enterpriseId The ID of the enterprise.
 *  @param userId The ID of the user.
 *  @param entitlementId The ID of the entitlement (a product ID), e.g.
 *    "app:com.google.android.gm".
 *
 *  @returns GTLRAndroidEnterpriseQuery_EntitlementsUpdate
 */
+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_Entitlement *)object
                   enterpriseId:(NSString *)enterpriseId
                         userId:(NSString *)userId
                  entitlementId:(NSString *)entitlementId;

@end

/**
 *  Retrieves details of an enterprise's group license for a product.
 *
 *  Method: androidenterprise.grouplicenses.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_GrouplicensesGet : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForGrouplicensesGetWithenterpriseId:groupLicenseId:]

/** The ID of the enterprise. */
@property(copy, nullable) NSString *enterpriseId;

/**
 *  The ID of the product the group license is for, e.g.
 *  "app:com.google.android.gm".
 */
@property(copy, nullable) NSString *groupLicenseId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_GroupLicense.
 *
 *  Retrieves details of an enterprise's group license for a product.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param groupLicenseId The ID of the product the group license is for, e.g.
 *    "app:com.google.android.gm".
 *
 *  @returns GTLRAndroidEnterpriseQuery_GrouplicensesGet
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                       groupLicenseId:(NSString *)groupLicenseId;

@end

/**
 *  Retrieves IDs of all products for which the enterprise has a group license.
 *
 *  Method: androidenterprise.grouplicenses.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_GrouplicensesList : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForGrouplicensesListWithenterpriseId:]

/** The ID of the enterprise. */
@property(copy, nullable) NSString *enterpriseId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_GroupLicensesListResponse.
 *
 *  Retrieves IDs of all products for which the enterprise has a group license.
 *
 *  @param enterpriseId The ID of the enterprise.
 *
 *  @returns GTLRAndroidEnterpriseQuery_GrouplicensesList
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId;

@end

/**
 *  Retrieves the IDs of the users who have been granted entitlements under the
 *  license.
 *
 *  Method: androidenterprise.grouplicenseusers.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_GrouplicenseusersList : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForGrouplicenseusersListWithenterpriseId:groupLicenseId:]

/** The ID of the enterprise. */
@property(copy, nullable) NSString *enterpriseId;

/**
 *  The ID of the product the group license is for, e.g.
 *  "app:com.google.android.gm".
 */
@property(copy, nullable) NSString *groupLicenseId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_GroupLicenseUsersListResponse.
 *
 *  Retrieves the IDs of the users who have been granted entitlements under the
 *  license.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param groupLicenseId The ID of the product the group license is for, e.g.
 *    "app:com.google.android.gm".
 *
 *  @returns GTLRAndroidEnterpriseQuery_GrouplicenseusersList
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                       groupLicenseId:(NSString *)groupLicenseId;

@end

/**
 *  Requests to remove an app from a device. A call to get or list will still
 *  show the app as installed on the device until it is actually removed.
 *
 *  Method: androidenterprise.installs.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_InstallsDelete : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForInstallsDeleteWithenterpriseId:userId:deviceId:installId:]

/** The Android ID of the device. */
@property(copy, nullable) NSString *deviceId;

/** The ID of the enterprise. */
@property(copy, nullable) NSString *enterpriseId;

/**
 *  The ID of the product represented by the install, e.g.
 *  "app:com.google.android.gm".
 */
@property(copy, nullable) NSString *installId;

/** The ID of the user. */
@property(copy, nullable) NSString *userId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Requests to remove an app from a device. A call to get or list will still
 *  show the app as installed on the device until it is actually removed.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param userId The ID of the user.
 *  @param deviceId The Android ID of the device.
 *  @param installId The ID of the product represented by the install, e.g.
 *    "app:com.google.android.gm".
 *
 *  @returns GTLRAndroidEnterpriseQuery_InstallsDelete
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               userId:(NSString *)userId
                             deviceId:(NSString *)deviceId
                            installId:(NSString *)installId;

@end

/**
 *  Retrieves details of an installation of an app on a device.
 *
 *  Method: androidenterprise.installs.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_InstallsGet : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForInstallsGetWithenterpriseId:userId:deviceId:installId:]

/** The Android ID of the device. */
@property(copy, nullable) NSString *deviceId;

/** The ID of the enterprise. */
@property(copy, nullable) NSString *enterpriseId;

/**
 *  The ID of the product represented by the install, e.g.
 *  "app:com.google.android.gm".
 */
@property(copy, nullable) NSString *installId;

/** The ID of the user. */
@property(copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_Install.
 *
 *  Retrieves details of an installation of an app on a device.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param userId The ID of the user.
 *  @param deviceId The Android ID of the device.
 *  @param installId The ID of the product represented by the install, e.g.
 *    "app:com.google.android.gm".
 *
 *  @returns GTLRAndroidEnterpriseQuery_InstallsGet
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               userId:(NSString *)userId
                             deviceId:(NSString *)deviceId
                            installId:(NSString *)installId;

@end

/**
 *  Retrieves the details of all apps installed on the specified device.
 *
 *  Method: androidenterprise.installs.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_InstallsList : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForInstallsListWithenterpriseId:userId:deviceId:]

/** The Android ID of the device. */
@property(copy, nullable) NSString *deviceId;

/** The ID of the enterprise. */
@property(copy, nullable) NSString *enterpriseId;

/** The ID of the user. */
@property(copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_InstallsListResponse.
 *
 *  Retrieves the details of all apps installed on the specified device.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param userId The ID of the user.
 *  @param deviceId The Android ID of the device.
 *
 *  @returns GTLRAndroidEnterpriseQuery_InstallsList
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               userId:(NSString *)userId
                             deviceId:(NSString *)deviceId;

@end

/**
 *  Requests to install the latest version of an app to a device. If the app is
 *  already installed then it is updated to the latest version if necessary.
 *  This method supports patch semantics.
 *
 *  Method: androidenterprise.installs.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_InstallsPatch : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForInstallsPatchWithObject:enterpriseId:userId:deviceId:installId:]

/** The Android ID of the device. */
@property(copy, nullable) NSString *deviceId;

/** The ID of the enterprise. */
@property(copy, nullable) NSString *enterpriseId;

/**
 *  The ID of the product represented by the install, e.g.
 *  "app:com.google.android.gm".
 */
@property(copy, nullable) NSString *installId;

/** The ID of the user. */
@property(copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_Install.
 *
 *  Requests to install the latest version of an app to a device. If the app is
 *  already installed then it is updated to the latest version if necessary.
 *  This method supports patch semantics.
 *
 *  @param object The @c GTLRAndroidEnterprise_Install to include in the query.
 *  @param enterpriseId The ID of the enterprise.
 *  @param userId The ID of the user.
 *  @param deviceId The Android ID of the device.
 *  @param installId The ID of the product represented by the install, e.g.
 *    "app:com.google.android.gm".
 *
 *  @returns GTLRAndroidEnterpriseQuery_InstallsPatch
 */
+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_Install *)object
                   enterpriseId:(NSString *)enterpriseId
                         userId:(NSString *)userId
                       deviceId:(NSString *)deviceId
                      installId:(NSString *)installId;

@end

/**
 *  Requests to install the latest version of an app to a device. If the app is
 *  already installed then it is updated to the latest version if necessary.
 *
 *  Method: androidenterprise.installs.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_InstallsUpdate : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForInstallsUpdateWithObject:enterpriseId:userId:deviceId:installId:]

/** The Android ID of the device. */
@property(copy, nullable) NSString *deviceId;

/** The ID of the enterprise. */
@property(copy, nullable) NSString *enterpriseId;

/**
 *  The ID of the product represented by the install, e.g.
 *  "app:com.google.android.gm".
 */
@property(copy, nullable) NSString *installId;

/** The ID of the user. */
@property(copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_Install.
 *
 *  Requests to install the latest version of an app to a device. If the app is
 *  already installed then it is updated to the latest version if necessary.
 *
 *  @param object The @c GTLRAndroidEnterprise_Install to include in the query.
 *  @param enterpriseId The ID of the enterprise.
 *  @param userId The ID of the user.
 *  @param deviceId The Android ID of the device.
 *  @param installId The ID of the product represented by the install, e.g.
 *    "app:com.google.android.gm".
 *
 *  @returns GTLRAndroidEnterpriseQuery_InstallsUpdate
 */
+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_Install *)object
                   enterpriseId:(NSString *)enterpriseId
                         userId:(NSString *)userId
                       deviceId:(NSString *)deviceId
                      installId:(NSString *)installId;

@end

/**
 *  Retrieves details of an Android app permission for display to an enterprise
 *  admin.
 *
 *  Method: androidenterprise.permissions.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_PermissionsGet : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForPermissionsGetWithpermissionId:]

/** The BCP47 tag for the user's preferred language (e.g. "en-US", "de") */
@property(copy, nullable) NSString *language;

/** The ID of the permission. */
@property(copy, nullable) NSString *permissionId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_Permission.
 *
 *  Retrieves details of an Android app permission for display to an enterprise
 *  admin.
 *
 *  @param permissionId The ID of the permission.
 *
 *  @returns GTLRAndroidEnterpriseQuery_PermissionsGet
 */
+ (instancetype)queryWithPermissionId:(NSString *)permissionId;

@end

/**
 *  Approves the specified product and the relevant app permissions, if any. The
 *  maximum number of products that you can approve per enterprise customer is
 *  1,000.
 *  To learn how to use Google Play for Work to design and create a store layout
 *  to display approved products to your users, see Store Layout Design.
 *
 *  Method: androidenterprise.products.approve
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_ProductsApprove : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForProductsApproveWithObject:enterpriseId:productId:]

/** The ID of the enterprise. */
@property(copy, nullable) NSString *enterpriseId;

/** The ID of the product. */
@property(copy, nullable) NSString *productId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Approves the specified product and the relevant app permissions, if any. The
 *  maximum number of products that you can approve per enterprise customer is
 *  1,000.
 *  To learn how to use Google Play for Work to design and create a store layout
 *  to display approved products to your users, see Store Layout Design.
 *
 *  @param object The @c GTLRAndroidEnterprise_ProductsApproveRequest to include
 *    in the query.
 *  @param enterpriseId The ID of the enterprise.
 *  @param productId The ID of the product.
 *
 *  @returns GTLRAndroidEnterpriseQuery_ProductsApprove
 */
+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_ProductsApproveRequest *)object
                   enterpriseId:(NSString *)enterpriseId
                      productId:(NSString *)productId;

@end

/**
 *  Generates a URL that can be rendered in an iframe to display the permissions
 *  (if any) of a product. An enterprise admin must view these permissions and
 *  accept them on behalf of their organization in order to approve that
 *  product.
 *  Admins should accept the displayed permissions by interacting with a
 *  separate UI element in the EMM console, which in turn should trigger the use
 *  of this URL as the approvalUrlInfo.approvalUrl property in a
 *  Products.approve call to approve the product. This URL can only be used to
 *  display permissions for up to 1 day.
 *
 *  Method: androidenterprise.products.generateApprovalUrl
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_ProductsGenerateApprovalUrl : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForProductsGenerateApprovalUrlWithenterpriseId:productId:]

/** The ID of the enterprise. */
@property(copy, nullable) NSString *enterpriseId;

/**
 *  The BCP 47 language code used for permission names and descriptions in the
 *  returned iframe, for instance "en-US".
 */
@property(copy, nullable) NSString *languageCode;

/** The ID of the product. */
@property(copy, nullable) NSString *productId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_ProductsGenerateApprovalUrlResponse.
 *
 *  Generates a URL that can be rendered in an iframe to display the permissions
 *  (if any) of a product. An enterprise admin must view these permissions and
 *  accept them on behalf of their organization in order to approve that
 *  product.
 *  Admins should accept the displayed permissions by interacting with a
 *  separate UI element in the EMM console, which in turn should trigger the use
 *  of this URL as the approvalUrlInfo.approvalUrl property in a
 *  Products.approve call to approve the product. This URL can only be used to
 *  display permissions for up to 1 day.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param productId The ID of the product.
 *
 *  @returns GTLRAndroidEnterpriseQuery_ProductsGenerateApprovalUrl
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                            productId:(NSString *)productId;

@end

/**
 *  Retrieves details of a product for display to an enterprise admin.
 *
 *  Method: androidenterprise.products.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_ProductsGet : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForProductsGetWithenterpriseId:productId:]

/** The ID of the enterprise. */
@property(copy, nullable) NSString *enterpriseId;

/** The BCP47 tag for the user's preferred language (e.g. "en-US", "de"). */
@property(copy, nullable) NSString *language;

/** The ID of the product, e.g. "app:com.google.android.gm". */
@property(copy, nullable) NSString *productId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_Product.
 *
 *  Retrieves details of a product for display to an enterprise admin.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param productId The ID of the product, e.g. "app:com.google.android.gm".
 *
 *  @returns GTLRAndroidEnterpriseQuery_ProductsGet
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                            productId:(NSString *)productId;

@end

/**
 *  Retrieves the schema defining app restrictions configurable for this
 *  product. All products have a schema, but this may be empty if no app
 *  restrictions are defined.
 *
 *  Method: androidenterprise.products.getAppRestrictionsSchema
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_ProductsGetAppRestrictionsSchema : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForProductsGetAppRestrictionsSchemaWithenterpriseId:productId:]

/** The ID of the enterprise. */
@property(copy, nullable) NSString *enterpriseId;

/** The BCP47 tag for the user's preferred language (e.g. "en-US", "de"). */
@property(copy, nullable) NSString *language;

/** The ID of the product. */
@property(copy, nullable) NSString *productId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_AppRestrictionsSchema.
 *
 *  Retrieves the schema defining app restrictions configurable for this
 *  product. All products have a schema, but this may be empty if no app
 *  restrictions are defined.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param productId The ID of the product.
 *
 *  @returns GTLRAndroidEnterpriseQuery_ProductsGetAppRestrictionsSchema
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                            productId:(NSString *)productId;

@end

/**
 *  Retrieves the Android app permissions required by this app.
 *
 *  Method: androidenterprise.products.getPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_ProductsGetPermissions : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForProductsGetPermissionsWithenterpriseId:productId:]

/** The ID of the enterprise. */
@property(copy, nullable) NSString *enterpriseId;

/** The ID of the product. */
@property(copy, nullable) NSString *productId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_ProductPermissions.
 *
 *  Retrieves the Android app permissions required by this app.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param productId The ID of the product.
 *
 *  @returns GTLRAndroidEnterpriseQuery_ProductsGetPermissions
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                            productId:(NSString *)productId;

@end

/**
 *  Finds approved products that match a query.
 *
 *  Method: androidenterprise.products.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_ProductsList : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForProductsListWithenterpriseId:]

/**
 *  Specifies whether to search among all products (false) or among only
 *  products that have been approved (true). Only "true" is supported, and
 *  should be specified.
 */
@property(assign) BOOL approved;

/** The ID of the enterprise. */
@property(copy, nullable) NSString *enterpriseId;

/**
 *  The BCP47 tag for the user's preferred language (e.g. "en-US", "de").
 *  Results are returned in the language best matching the preferred language.
 */
@property(copy, nullable) NSString *language;

/**
 *  Specifies the maximum number of products that can be returned per request.
 *  If not specified, uses a default value of 100, which is also the maximum
 *  retrievable within a single response.
 */
@property(assign) NSUInteger maxResults;

/**
 *  The search query as typed in the Google Play Store search box. If omitted,
 *  all approved apps will be returned (using the pagination parameters).
 */
@property(copy, nullable) NSString *query;

/**
 *  A pagination token is contained in a requests response when there are more
 *  products. The token can be used in a subsequent request to obtain more
 *  products, and so forth. This parameter cannot be used in the initial
 *  request.
 */
@property(copy, nullable) NSString *token;

/**
 *  Fetches a @c GTLRAndroidEnterprise_ProductsListResponse.
 *
 *  Finds approved products that match a query.
 *
 *  @param enterpriseId The ID of the enterprise.
 *
 *  @returns GTLRAndroidEnterpriseQuery_ProductsList
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId;

@end

/**
 *  This method has been deprecated. To programmatically approve applications,
 *  you must use the iframe mechanism via the generateApprovalUrl and approve
 *  methods of the Products resource. For more information, see the Play EMM API
 *  usage requirements.
 *  The updatePermissions method (deprecated) updates the set of Android app
 *  permissions for this app that have been accepted by the enterprise.
 *
 *  Method: androidenterprise.products.updatePermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_ProductsUpdatePermissions : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForProductsUpdatePermissionsWithObject:enterpriseId:productId:]

/** The ID of the enterprise. */
@property(copy, nullable) NSString *enterpriseId;

/** The ID of the product. */
@property(copy, nullable) NSString *productId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_ProductPermissions.
 *
 *  This method has been deprecated. To programmatically approve applications,
 *  you must use the iframe mechanism via the generateApprovalUrl and approve
 *  methods of the Products resource. For more information, see the Play EMM API
 *  usage requirements.
 *  The updatePermissions method (deprecated) updates the set of Android app
 *  permissions for this app that have been accepted by the enterprise.
 *
 *  @param object The @c GTLRAndroidEnterprise_ProductPermissions to include in
 *    the query.
 *  @param enterpriseId The ID of the enterprise.
 *  @param productId The ID of the product.
 *
 *  @returns GTLRAndroidEnterpriseQuery_ProductsUpdatePermissions
 */
+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_ProductPermissions *)object
                   enterpriseId:(NSString *)enterpriseId
                      productId:(NSString *)productId;

@end

/**
 *  Deletes a cluster.
 *
 *  Method: androidenterprise.storelayoutclusters.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_StorelayoutclustersDelete : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForStorelayoutclustersDeleteWithenterpriseId:pageId:clusterId:]

/** The ID of the cluster. */
@property(copy, nullable) NSString *clusterId;

/** The ID of the enterprise. */
@property(copy, nullable) NSString *enterpriseId;

/** The ID of the page. */
@property(copy, nullable) NSString *pageId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a cluster.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param pageId The ID of the page.
 *  @param clusterId The ID of the cluster.
 *
 *  @returns GTLRAndroidEnterpriseQuery_StorelayoutclustersDelete
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               pageId:(NSString *)pageId
                            clusterId:(NSString *)clusterId;

@end

/**
 *  Retrieves details of a cluster.
 *
 *  Method: androidenterprise.storelayoutclusters.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_StorelayoutclustersGet : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForStorelayoutclustersGetWithenterpriseId:pageId:clusterId:]

/** The ID of the cluster. */
@property(copy, nullable) NSString *clusterId;

/** The ID of the enterprise. */
@property(copy, nullable) NSString *enterpriseId;

/** The ID of the page. */
@property(copy, nullable) NSString *pageId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_StoreCluster.
 *
 *  Retrieves details of a cluster.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param pageId The ID of the page.
 *  @param clusterId The ID of the cluster.
 *
 *  @returns GTLRAndroidEnterpriseQuery_StorelayoutclustersGet
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               pageId:(NSString *)pageId
                            clusterId:(NSString *)clusterId;

@end

/**
 *  Inserts a new cluster in a page.
 *
 *  Method: androidenterprise.storelayoutclusters.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_StorelayoutclustersInsert : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForStorelayoutclustersInsertWithObject:enterpriseId:pageId:]

/** The ID of the enterprise. */
@property(copy, nullable) NSString *enterpriseId;

/** The ID of the page. */
@property(copy, nullable) NSString *pageId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_StoreCluster.
 *
 *  Inserts a new cluster in a page.
 *
 *  @param object The @c GTLRAndroidEnterprise_StoreCluster to include in the
 *    query.
 *  @param enterpriseId The ID of the enterprise.
 *  @param pageId The ID of the page.
 *
 *  @returns GTLRAndroidEnterpriseQuery_StorelayoutclustersInsert
 */
+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_StoreCluster *)object
                   enterpriseId:(NSString *)enterpriseId
                         pageId:(NSString *)pageId;

@end

/**
 *  Retrieves the details of all clusters on the specified page.
 *
 *  Method: androidenterprise.storelayoutclusters.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_StorelayoutclustersList : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForStorelayoutclustersListWithenterpriseId:pageId:]

/** The ID of the enterprise. */
@property(copy, nullable) NSString *enterpriseId;

/** The ID of the page. */
@property(copy, nullable) NSString *pageId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_StoreLayoutClustersListResponse.
 *
 *  Retrieves the details of all clusters on the specified page.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param pageId The ID of the page.
 *
 *  @returns GTLRAndroidEnterpriseQuery_StorelayoutclustersList
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               pageId:(NSString *)pageId;

@end

/**
 *  Updates a cluster. This method supports patch semantics.
 *
 *  Method: androidenterprise.storelayoutclusters.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_StorelayoutclustersPatch : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForStorelayoutclustersPatchWithObject:enterpriseId:pageId:clusterId:]

/** The ID of the cluster. */
@property(copy, nullable) NSString *clusterId;

/** The ID of the enterprise. */
@property(copy, nullable) NSString *enterpriseId;

/** The ID of the page. */
@property(copy, nullable) NSString *pageId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_StoreCluster.
 *
 *  Updates a cluster. This method supports patch semantics.
 *
 *  @param object The @c GTLRAndroidEnterprise_StoreCluster to include in the
 *    query.
 *  @param enterpriseId The ID of the enterprise.
 *  @param pageId The ID of the page.
 *  @param clusterId The ID of the cluster.
 *
 *  @returns GTLRAndroidEnterpriseQuery_StorelayoutclustersPatch
 */
+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_StoreCluster *)object
                   enterpriseId:(NSString *)enterpriseId
                         pageId:(NSString *)pageId
                      clusterId:(NSString *)clusterId;

@end

/**
 *  Updates a cluster.
 *
 *  Method: androidenterprise.storelayoutclusters.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_StorelayoutclustersUpdate : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForStorelayoutclustersUpdateWithObject:enterpriseId:pageId:clusterId:]

/** The ID of the cluster. */
@property(copy, nullable) NSString *clusterId;

/** The ID of the enterprise. */
@property(copy, nullable) NSString *enterpriseId;

/** The ID of the page. */
@property(copy, nullable) NSString *pageId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_StoreCluster.
 *
 *  Updates a cluster.
 *
 *  @param object The @c GTLRAndroidEnterprise_StoreCluster to include in the
 *    query.
 *  @param enterpriseId The ID of the enterprise.
 *  @param pageId The ID of the page.
 *  @param clusterId The ID of the cluster.
 *
 *  @returns GTLRAndroidEnterpriseQuery_StorelayoutclustersUpdate
 */
+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_StoreCluster *)object
                   enterpriseId:(NSString *)enterpriseId
                         pageId:(NSString *)pageId
                      clusterId:(NSString *)clusterId;

@end

/**
 *  Deletes a store page.
 *
 *  Method: androidenterprise.storelayoutpages.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_StorelayoutpagesDelete : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForStorelayoutpagesDeleteWithenterpriseId:pageId:]

/** The ID of the enterprise. */
@property(copy, nullable) NSString *enterpriseId;

/** The ID of the page. */
@property(copy, nullable) NSString *pageId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a store page.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param pageId The ID of the page.
 *
 *  @returns GTLRAndroidEnterpriseQuery_StorelayoutpagesDelete
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               pageId:(NSString *)pageId;

@end

/**
 *  Retrieves details of a store page.
 *
 *  Method: androidenterprise.storelayoutpages.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_StorelayoutpagesGet : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForStorelayoutpagesGetWithenterpriseId:pageId:]

/** The ID of the enterprise. */
@property(copy, nullable) NSString *enterpriseId;

/** The ID of the page. */
@property(copy, nullable) NSString *pageId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_StorePage.
 *
 *  Retrieves details of a store page.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param pageId The ID of the page.
 *
 *  @returns GTLRAndroidEnterpriseQuery_StorelayoutpagesGet
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               pageId:(NSString *)pageId;

@end

/**
 *  Inserts a new store page.
 *
 *  Method: androidenterprise.storelayoutpages.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_StorelayoutpagesInsert : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForStorelayoutpagesInsertWithObject:enterpriseId:]

/** The ID of the enterprise. */
@property(copy, nullable) NSString *enterpriseId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_StorePage.
 *
 *  Inserts a new store page.
 *
 *  @param object The @c GTLRAndroidEnterprise_StorePage to include in the
 *    query.
 *  @param enterpriseId The ID of the enterprise.
 *
 *  @returns GTLRAndroidEnterpriseQuery_StorelayoutpagesInsert
 */
+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_StorePage *)object
                   enterpriseId:(NSString *)enterpriseId;

@end

/**
 *  Retrieves the details of all pages in the store.
 *
 *  Method: androidenterprise.storelayoutpages.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_StorelayoutpagesList : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForStorelayoutpagesListWithenterpriseId:]

/** The ID of the enterprise. */
@property(copy, nullable) NSString *enterpriseId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_StoreLayoutPagesListResponse.
 *
 *  Retrieves the details of all pages in the store.
 *
 *  @param enterpriseId The ID of the enterprise.
 *
 *  @returns GTLRAndroidEnterpriseQuery_StorelayoutpagesList
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId;

@end

/**
 *  Updates the content of a store page. This method supports patch semantics.
 *
 *  Method: androidenterprise.storelayoutpages.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_StorelayoutpagesPatch : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForStorelayoutpagesPatchWithObject:enterpriseId:pageId:]

/** The ID of the enterprise. */
@property(copy, nullable) NSString *enterpriseId;

/** The ID of the page. */
@property(copy, nullable) NSString *pageId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_StorePage.
 *
 *  Updates the content of a store page. This method supports patch semantics.
 *
 *  @param object The @c GTLRAndroidEnterprise_StorePage to include in the
 *    query.
 *  @param enterpriseId The ID of the enterprise.
 *  @param pageId The ID of the page.
 *
 *  @returns GTLRAndroidEnterpriseQuery_StorelayoutpagesPatch
 */
+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_StorePage *)object
                   enterpriseId:(NSString *)enterpriseId
                         pageId:(NSString *)pageId;

@end

/**
 *  Updates the content of a store page.
 *
 *  Method: androidenterprise.storelayoutpages.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_StorelayoutpagesUpdate : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForStorelayoutpagesUpdateWithObject:enterpriseId:pageId:]

/** The ID of the enterprise. */
@property(copy, nullable) NSString *enterpriseId;

/** The ID of the page. */
@property(copy, nullable) NSString *pageId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_StorePage.
 *
 *  Updates the content of a store page.
 *
 *  @param object The @c GTLRAndroidEnterprise_StorePage to include in the
 *    query.
 *  @param enterpriseId The ID of the enterprise.
 *  @param pageId The ID of the page.
 *
 *  @returns GTLRAndroidEnterpriseQuery_StorelayoutpagesUpdate
 */
+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_StorePage *)object
                   enterpriseId:(NSString *)enterpriseId
                         pageId:(NSString *)pageId;

@end

/**
 *  Generates a token (activation code) to allow this user to configure their
 *  work account in the Android Setup Wizard. Revokes any previously generated
 *  token.
 *  This call only works with Google managed accounts.
 *
 *  Method: androidenterprise.users.generateToken
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_UsersGenerateToken : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForUsersGenerateTokenWithenterpriseId:userId:]

/** The ID of the enterprise. */
@property(copy, nullable) NSString *enterpriseId;

/** The ID of the user. */
@property(copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_UserToken.
 *
 *  Generates a token (activation code) to allow this user to configure their
 *  work account in the Android Setup Wizard. Revokes any previously generated
 *  token.
 *  This call only works with Google managed accounts.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param userId The ID of the user.
 *
 *  @returns GTLRAndroidEnterpriseQuery_UsersGenerateToken
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               userId:(NSString *)userId;

@end

/**
 *  Retrieves a user's details.
 *
 *  Method: androidenterprise.users.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_UsersGet : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForUsersGetWithenterpriseId:userId:]

/** The ID of the enterprise. */
@property(copy, nullable) NSString *enterpriseId;

/** The ID of the user. */
@property(copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_User.
 *
 *  Retrieves a user's details.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param userId The ID of the user.
 *
 *  @returns GTLRAndroidEnterpriseQuery_UsersGet
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               userId:(NSString *)userId;

@end

/**
 *  Retrieves the set of products a user is entitled to access.
 *
 *  Method: androidenterprise.users.getAvailableProductSet
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_UsersGetAvailableProductSet : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForUsersGetAvailableProductSetWithenterpriseId:userId:]

/** The ID of the enterprise. */
@property(copy, nullable) NSString *enterpriseId;

/** The ID of the user. */
@property(copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_ProductSet.
 *
 *  Retrieves the set of products a user is entitled to access.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param userId The ID of the user.
 *
 *  @returns GTLRAndroidEnterpriseQuery_UsersGetAvailableProductSet
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               userId:(NSString *)userId;

@end

/**
 *  Looks up a user by their primary email address.
 *
 *  Method: androidenterprise.users.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_UsersList : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForUsersListWithenterpriseId:email:]

/** The exact primary email address of the user to look up. */
@property(copy, nullable) NSString *email;

/** The ID of the enterprise. */
@property(copy, nullable) NSString *enterpriseId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_UsersListResponse.
 *
 *  Looks up a user by their primary email address.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param email The exact primary email address of the user to look up.
 *
 *  @returns GTLRAndroidEnterpriseQuery_UsersList
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                                email:(NSString *)email;

@end

/**
 *  Revokes a previously generated token (activation code) for the user.
 *
 *  Method: androidenterprise.users.revokeToken
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_UsersRevokeToken : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForUsersRevokeTokenWithenterpriseId:userId:]

/** The ID of the enterprise. */
@property(copy, nullable) NSString *enterpriseId;

/** The ID of the user. */
@property(copy, nullable) NSString *userId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Revokes a previously generated token (activation code) for the user.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param userId The ID of the user.
 *
 *  @returns GTLRAndroidEnterpriseQuery_UsersRevokeToken
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               userId:(NSString *)userId;

@end

/**
 *  Modifies the set of products a user is entitled to access.
 *
 *  Method: androidenterprise.users.setAvailableProductSet
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_UsersSetAvailableProductSet : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForUsersSetAvailableProductSetWithObject:enterpriseId:userId:]

/** The ID of the enterprise. */
@property(copy, nullable) NSString *enterpriseId;

/** The ID of the user. */
@property(copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_ProductSet.
 *
 *  Modifies the set of products a user is entitled to access.
 *
 *  @param object The @c GTLRAndroidEnterprise_ProductSet to include in the
 *    query.
 *  @param enterpriseId The ID of the enterprise.
 *  @param userId The ID of the user.
 *
 *  @returns GTLRAndroidEnterpriseQuery_UsersSetAvailableProductSet
 */
+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_ProductSet *)object
                   enterpriseId:(NSString *)enterpriseId
                         userId:(NSString *)userId;

@end

NS_ASSUME_NONNULL_END
