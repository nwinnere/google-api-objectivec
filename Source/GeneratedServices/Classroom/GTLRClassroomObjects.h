// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Classroom API (classroom/v1)
// Description:
//   Manages classes, rosters, and invitations in Google Classroom.
// Documentation:
//   https://developers.google.com/classroom/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRClassroom_Course;
@class GTLRClassroom_CourseAlias;
@class GTLRClassroom_GlobalPermission;
@class GTLRClassroom_Invitation;
@class GTLRClassroom_Name;
@class GTLRClassroom_Student;
@class GTLRClassroom_Teacher;
@class GTLRClassroom_UserProfile;

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRClassroom_Course.courseState

/** Value: "ACTIVE" */
GTLR_EXTERN NSString * const kGTLRClassroom_Course_CourseState_Active;
/** Value: "ARCHIVED" */
GTLR_EXTERN NSString * const kGTLRClassroom_Course_CourseState_Archived;
/** Value: "COURSE_STATE_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRClassroom_Course_CourseState_CourseStateUnspecified;
/** Value: "DECLINED" */
GTLR_EXTERN NSString * const kGTLRClassroom_Course_CourseState_Declined;
/** Value: "PROVISIONED" */
GTLR_EXTERN NSString * const kGTLRClassroom_Course_CourseState_Provisioned;

// ----------------------------------------------------------------------------
// GTLRClassroom_GlobalPermission.permission

/** Value: "CREATE_COURSE" */
GTLR_EXTERN NSString * const kGTLRClassroom_GlobalPermission_Permission_CreateCourse;
/** Value: "PERMISSION_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRClassroom_GlobalPermission_Permission_PermissionUnspecified;

// ----------------------------------------------------------------------------
// GTLRClassroom_Invitation.role

/** Value: "COURSE_ROLE_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRClassroom_Invitation_Role_CourseRoleUnspecified;
/** Value: "STUDENT" */
GTLR_EXTERN NSString * const kGTLRClassroom_Invitation_Role_Student;
/** Value: "TEACHER" */
GTLR_EXTERN NSString * const kGTLRClassroom_Invitation_Role_Teacher;

/**
 *  A Course in Classroom.
 */
@interface GTLRClassroom_Course : GTLRObject

/** Absolute link to this course in the Classroom web UI. Read-only. */
@property(copy, nullable) NSString *alternateLink;

/**
 *  State of the course. If unspecified, the default state is `PROVISIONED`.
 *
 *  Likely values:
 *    @arg @c kGTLRClassroom_Course_CourseState_Active Value "ACTIVE"
 *    @arg @c kGTLRClassroom_Course_CourseState_Archived Value "ARCHIVED"
 *    @arg @c kGTLRClassroom_Course_CourseState_CourseStateUnspecified Value
 *        "COURSE_STATE_UNSPECIFIED"
 *    @arg @c kGTLRClassroom_Course_CourseState_Declined Value "DECLINED"
 *    @arg @c kGTLRClassroom_Course_CourseState_Provisioned Value "PROVISIONED"
 */
@property(copy, nullable) NSString *courseState;

/**
 *  Creation time of the course. Specifying this field in a course update mask
 *  will result in an error. Read-only.
 */
@property(copy, nullable) NSString *creationTime;

/**
 *  Optional description. For example, "We'll be learning about the structure of
 *  living creatures from a combination of textbooks, guest lectures, and lab
 *  work. Expect to be excited!" If set, this field must be a valid UTF-8 string
 *  and no longer than 30,000 characters.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(copy, nullable) NSString *descriptionProperty;

/**
 *  Optional heading for the description. For example, "Welcome to 10th Grade
 *  Biology." If set, this field must be a valid UTF-8 string and no longer than
 *  3600 characters.
 */
@property(copy, nullable) NSString *descriptionHeading;

/**
 *  Enrollment code to use when joining this course. Specifying this field in a
 *  course update mask will result in an error. Read-only.
 */
@property(copy, nullable) NSString *enrollmentCode;

/**
 *  Identifier for this course assigned by Classroom. When creating a course,
 *  you may optionally set this identifier to an alias string in the request to
 *  create a corresponding alias. The `id` is still assigned by Classroom and
 *  cannot be updated after the course is created. Specifying this field in a
 *  course update mask will result in an error.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(copy, nullable) NSString *identifier;

/**
 *  Name of the course. For example, "10th Grade Biology". The name is required.
 *  It must be between 1 and 750 characters and a valid UTF-8 string.
 */
@property(copy, nullable) NSString *name;

/**
 *  The identifier of the owner of a course. When specified as a parameter of a
 *  create course request, this field is required. The identifier can be one of
 *  the following: * the numeric identifier for the user * the email address of
 *  the user * the string literal `"me"`, indicating the requesting user This
 *  must be set in a create request. Specifying this field in a course update
 *  mask will result in an `INVALID_ARGUMENT` error.
 */
@property(copy, nullable) NSString *ownerId;

/**
 *  Optional room location. For example, "301". If set, this field must be a
 *  valid UTF-8 string and no longer than 650 characters.
 */
@property(copy, nullable) NSString *room;

/**
 *  Section of the course. For example, "Period 2". If set, this field must be a
 *  valid UTF-8 string and no longer than 2800 characters.
 */
@property(copy, nullable) NSString *section;

/**
 *  Time of the most recent update to this course. Specifying this field in a
 *  course update mask will result in an error. Read-only.
 */
@property(copy, nullable) NSString *updateTime;

@end


/**
 *  Alternative identifier for a course. An alias uniquely identifies a course.
 *  It must be unique within one of the following scopes: * domain: A
 *  domain-scoped alias is visible to all users within the alias creator's
 *  domain and can be created only by a domain admin. A domain-scoped alias is
 *  often used when a course has an identifier external to Classroom. * project:
 *  A project-scoped alias is visible to any request from an application using
 *  the Developer Console project ID that created the alias and can be created
 *  by any project. A project-scoped alias is often used when an application has
 *  alternative identifiers. A random value can also be used to avoid duplicate
 *  courses in the event of transmission failures, as retrying a request will
 *  return `ALREADY_EXISTS` if a previous one has succeeded.
 */
@interface GTLRClassroom_CourseAlias : GTLRObject

/**
 *  Alias string. The format of the string indicates the desired alias scoping.
 *  * `d:` indicates a domain-scoped alias. Example: `d:math_101` * `p:`
 *  indicates a project-scoped alias. Example: `p:abc123` This field has a
 *  maximum length of 256 characters.
 */
@property(copy, nullable) NSString *alias;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON
 *  representation for `Empty` is empty JSON object `{}`.
 */
@interface GTLRClassroom_Empty : GTLRObject
@end


/**
 *  Global user permission description.
 */
@interface GTLRClassroom_GlobalPermission : GTLRObject

/**
 *  Permission value.
 *
 *  Likely values:
 *    @arg @c kGTLRClassroom_GlobalPermission_Permission_CreateCourse Value
 *        "CREATE_COURSE"
 *    @arg @c kGTLRClassroom_GlobalPermission_Permission_PermissionUnspecified
 *        Value "PERMISSION_UNSPECIFIED"
 */
@property(copy, nullable) NSString *permission;

@end


/**
 *  An invitation to join a course.
 */
@interface GTLRClassroom_Invitation : GTLRObject

/** Identifier of the course to invite the user to. */
@property(copy, nullable) NSString *courseId;

/**
 *  Identifier assigned by Classroom. Read-only.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(copy, nullable) NSString *identifier;

/**
 *  Role to invite the user to have. Must not be `COURSE_ROLE_UNSPECIFIED`.
 *
 *  Likely values:
 *    @arg @c kGTLRClassroom_Invitation_Role_CourseRoleUnspecified Value
 *        "COURSE_ROLE_UNSPECIFIED"
 *    @arg @c kGTLRClassroom_Invitation_Role_Student Value "STUDENT"
 *    @arg @c kGTLRClassroom_Invitation_Role_Teacher Value "TEACHER"
 */
@property(copy, nullable) NSString *role;

/**
 *  Identifier of the invited user. When specified as a parameter of a request,
 *  this identifier can be set to one of the following: * the numeric identifier
 *  for the user * the email address of the user * the string literal `"me"`,
 *  indicating the requesting user
 */
@property(copy, nullable) NSString *userId;

@end


/**
 *  Response when listing course aliases.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "aliases" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRClassroom_ListCourseAliasesResponse : GTLRCollectionObject

/**
 *  The course aliases.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(strong, nullable) NSArray<GTLRClassroom_CourseAlias *> *aliases;

/**
 *  Token identifying the next page of results to return. If empty, no further
 *  results are available.
 */
@property(copy, nullable) NSString *nextPageToken;

@end


/**
 *  Response when listing courses.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "courses" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRClassroom_ListCoursesResponse : GTLRCollectionObject

/**
 *  Courses that match the list request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(strong, nullable) NSArray<GTLRClassroom_Course *> *courses;

/**
 *  Token identifying the next page of results to return. If empty, no further
 *  results are available.
 */
@property(copy, nullable) NSString *nextPageToken;

@end


/**
 *  Response when listing invitations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "invitations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRClassroom_ListInvitationsResponse : GTLRCollectionObject

/**
 *  Invitations that match the list request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(strong, nullable) NSArray<GTLRClassroom_Invitation *> *invitations;

/**
 *  Token identifying the next page of results to return. If empty, no further
 *  results are available.
 */
@property(copy, nullable) NSString *nextPageToken;

@end


/**
 *  Response when listing students.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "students" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRClassroom_ListStudentsResponse : GTLRCollectionObject

/**
 *  Token identifying the next page of results to return. If empty, no further
 *  results are available.
 */
@property(copy, nullable) NSString *nextPageToken;

/**
 *  Students who match the list request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(strong, nullable) NSArray<GTLRClassroom_Student *> *students;

@end


/**
 *  Response when listing teachers.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "teachers" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRClassroom_ListTeachersResponse : GTLRCollectionObject

/**
 *  Token identifying the next page of results to return. If empty, no further
 *  results are available.
 */
@property(copy, nullable) NSString *nextPageToken;

/**
 *  Teachers who match the list request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(strong, nullable) NSArray<GTLRClassroom_Teacher *> *teachers;

@end


/**
 *  Details of the user's name.
 */
@interface GTLRClassroom_Name : GTLRObject

/** The user's last name. Read-only. */
@property(copy, nullable) NSString *familyName;

/**
 *  The user's full name formed by concatenating the first and last name values.
 *  Read-only.
 */
@property(copy, nullable) NSString *fullName;

/** The user's first name. Read-only. */
@property(copy, nullable) NSString *givenName;

@end


/**
 *  Student in a course.
 */
@interface GTLRClassroom_Student : GTLRObject

/** Identifier of the course. Read-only. */
@property(copy, nullable) NSString *courseId;

/** Global user information for the student. Read-only. */
@property(strong, nullable) GTLRClassroom_UserProfile *profile;

/**
 *  Identifier of the user. When specified as a parameter of a request, this
 *  identifier can be one of the following: * the numeric identifier for the
 *  user * the email address of the user * the string literal `"me"`, indicating
 *  the requesting user
 */
@property(copy, nullable) NSString *userId;

@end


/**
 *  Teacher of a course.
 */
@interface GTLRClassroom_Teacher : GTLRObject

/** Identifier of the course. Read-only. */
@property(copy, nullable) NSString *courseId;

/** Global user information for the teacher. Read-only. */
@property(strong, nullable) GTLRClassroom_UserProfile *profile;

/**
 *  Identifier of the user. When specified as a parameter of a request, this
 *  identifier can be one of the following: * the numeric identifier for the
 *  user * the email address of the user * the string literal `"me"`, indicating
 *  the requesting user
 */
@property(copy, nullable) NSString *userId;

@end


/**
 *  Global information for a user.
 */
@interface GTLRClassroom_UserProfile : GTLRObject

/** Email address of the user. Read-only. */
@property(copy, nullable) NSString *emailAddress;

/**
 *  Identifier of the user. Read-only.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(copy, nullable) NSString *identifier;

/** Name of the user. Read-only. */
@property(strong, nullable) GTLRClassroom_Name *name;

/** Global permissions of the user. Read-only. */
@property(strong, nullable) NSArray<GTLRClassroom_GlobalPermission *> *permissions;

/** URL of user's profile photo. Read-only. */
@property(copy, nullable) NSString *photoUrl;

@end

NS_ASSUME_NONNULL_END
