// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Classroom API (classroom/v1)
// Description:
//   Manages classes, rosters, and invitations in Google Classroom.
// Documentation:
//   https://developers.google.com/classroom/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRClassroom_Course;
@class GTLRClassroom_CourseAlias;
@class GTLRClassroom_Invitation;
@class GTLRClassroom_Student;
@class GTLRClassroom_Teacher;

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Classroom query classes.
 */
@interface GTLRClassroomQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(copy, nullable) NSString *fields;

@end

/**
 *  Creates an alias for a course. This method returns the following error
 *  codes: * `PERMISSION_DENIED` if the requesting user is not permitted to
 *  create the alias or for access errors. * `NOT_FOUND` if the course does not
 *  exist. * `ALREADY_EXISTS` if the alias already exists.
 *
 *  Method: classroom.courses.aliases.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomCourses
 */
@interface GTLRClassroomQuery_CoursesAliasesCreate : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForCoursesAliasesCreateWithObject:courseId:]

/**
 *  Identifier of the course to alias. This identifier can be either the
 *  Classroom-assigned identifier or an alias.
 */
@property(copy, nullable) NSString *courseId;

/**
 *  Fetches a @c GTLRClassroom_CourseAlias.
 *
 *  Creates an alias for a course. This method returns the following error
 *  codes: * `PERMISSION_DENIED` if the requesting user is not permitted to
 *  create the alias or for access errors. * `NOT_FOUND` if the course does not
 *  exist. * `ALREADY_EXISTS` if the alias already exists.
 *
 *  @param object The @c GTLRClassroom_CourseAlias to include in the query.
 *  @param courseId Identifier of the course to alias. This identifier can be
 *    either the Classroom-assigned identifier or an alias.
 *
 *  @returns GTLRClassroomQuery_CoursesAliasesCreate
 */
+ (instancetype)queryWithObject:(GTLRClassroom_CourseAlias *)object
                       courseId:(NSString *)courseId;

@end

/**
 *  Deletes an alias of a course. This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to remove the
 *  alias or for access errors. * `NOT_FOUND` if the alias does not exist.
 *
 *  Method: classroom.courses.aliases.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomCourses
 */
@interface GTLRClassroomQuery_CoursesAliasesDelete : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForCoursesAliasesDeleteWithcourseId:alias:]

/** Alias to delete. This may not be the Classroom-assigned identifier. */
@property(copy, nullable) NSString *alias;

/**
 *  Identifier of the course whose alias should be deleted. This identifier can
 *  be either the Classroom-assigned identifier or an alias.
 */
@property(copy, nullable) NSString *courseId;

/**
 *  Fetches a @c GTLRClassroom_Empty.
 *
 *  Deletes an alias of a course. This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to remove the
 *  alias or for access errors. * `NOT_FOUND` if the alias does not exist.
 *
 *  @param courseId Identifier of the course whose alias should be deleted. This
 *    identifier can be either the Classroom-assigned identifier or an alias.
 *  @param alias Alias to delete. This may not be the Classroom-assigned
 *    identifier.
 *
 *  @returns GTLRClassroomQuery_CoursesAliasesDelete
 */
+ (instancetype)queryWithCourseId:(NSString *)courseId
                            alias:(NSString *)alias;

@end

/**
 *  Returns a list of aliases for a course. This method returns the following
 *  error codes: * `PERMISSION_DENIED` if the requesting user is not permitted
 *  to access the course or for access errors. * `NOT_FOUND` if the course does
 *  not exist.
 *
 *  Method: classroom.courses.aliases.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomCourses
 *    @c kGTLRAuthScopeClassroomCoursesReadonly
 */
@interface GTLRClassroomQuery_CoursesAliasesList : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForCoursesAliasesListWithcourseId:]

/**
 *  The identifier of the course. This identifier can be either the
 *  Classroom-assigned identifier or an alias.
 */
@property(copy, nullable) NSString *courseId;

/**
 *  Maximum number of items to return. Zero or unspecified indicates that the
 *  server may assign a maximum. The server may return fewer than the specified
 *  number of results.
 */
@property(assign) NSInteger pageSize;

/**
 *  nextPageToken value returned from a previous list call, indicating that the
 *  subsequent page of results should be returned. The list request must be
 *  otherwise identical to the one that resulted in this token.
 */
@property(copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRClassroom_ListCourseAliasesResponse.
 *
 *  Returns a list of aliases for a course. This method returns the following
 *  error codes: * `PERMISSION_DENIED` if the requesting user is not permitted
 *  to access the course or for access errors. * `NOT_FOUND` if the course does
 *  not exist.
 *
 *  @param courseId The identifier of the course. This identifier can be either
 *    the Classroom-assigned identifier or an alias.
 *
 *  @returns GTLRClassroomQuery_CoursesAliasesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithCourseId:(NSString *)courseId;

@end

/**
 *  Creates a course. The user specified in `ownerId` is the owner of the
 *  created course and added as a teacher. This method returns the following
 *  error codes: * `PERMISSION_DENIED` if the requesting user is not permitted
 *  to create courses or for access errors. * `NOT_FOUND` if the primary teacher
 *  is not a valid user. * `FAILED_PRECONDITION` if the course owner's account
 *  is disabled or for the following request errors: *
 *  UserGroupsMembershipLimitReached * `ALREADY_EXISTS` if an alias was
 *  specified in the `id` and already exists.
 *
 *  Method: classroom.courses.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomCourses
 */
@interface GTLRClassroomQuery_CoursesCreate : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForCoursesCreateWithObject:]

/**
 *  Fetches a @c GTLRClassroom_Course.
 *
 *  Creates a course. The user specified in `ownerId` is the owner of the
 *  created course and added as a teacher. This method returns the following
 *  error codes: * `PERMISSION_DENIED` if the requesting user is not permitted
 *  to create courses or for access errors. * `NOT_FOUND` if the primary teacher
 *  is not a valid user. * `FAILED_PRECONDITION` if the course owner's account
 *  is disabled or for the following request errors: *
 *  UserGroupsMembershipLimitReached * `ALREADY_EXISTS` if an alias was
 *  specified in the `id` and already exists.
 *
 *  @param object The @c GTLRClassroom_Course to include in the query.
 *
 *  @returns GTLRClassroomQuery_CoursesCreate
 */
+ (instancetype)queryWithObject:(GTLRClassroom_Course *)object;

@end

/**
 *  Deletes a course. This method returns the following error codes: *
 *  `PERMISSION_DENIED` if the requesting user is not permitted to delete the
 *  requested course or for access errors. * `NOT_FOUND` if no course exists
 *  with the requested ID.
 *
 *  Method: classroom.courses.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomCourses
 */
@interface GTLRClassroomQuery_CoursesDelete : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForCoursesDeleteWithidentifier:]

/**
 *  Identifier of the course to delete. This identifier can be either the
 *  Classroom-assigned identifier or an alias.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(copy, nullable) NSString *identifier;

/**
 *  Fetches a @c GTLRClassroom_Empty.
 *
 *  Deletes a course. This method returns the following error codes: *
 *  `PERMISSION_DENIED` if the requesting user is not permitted to delete the
 *  requested course or for access errors. * `NOT_FOUND` if no course exists
 *  with the requested ID.
 *
 *  @param identifier Identifier of the course to delete. This identifier can be
 *    either the Classroom-assigned identifier or an alias.
 *
 *  @returns GTLRClassroomQuery_CoursesDelete
 */
+ (instancetype)queryWithIdentifier:(NSString *)identifier;

@end

/**
 *  Returns a course. This method returns the following error codes: *
 *  `PERMISSION_DENIED` if the requesting user is not permitted to access the
 *  requested course or for access errors. * `NOT_FOUND` if no course exists
 *  with the requested ID.
 *
 *  Method: classroom.courses.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomCourses
 *    @c kGTLRAuthScopeClassroomCoursesReadonly
 */
@interface GTLRClassroomQuery_CoursesGet : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForCoursesGetWithidentifier:]

/**
 *  Identifier of the course to return. This identifier can be either the
 *  Classroom-assigned identifier or an alias.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(copy, nullable) NSString *identifier;

/**
 *  Fetches a @c GTLRClassroom_Course.
 *
 *  Returns a course. This method returns the following error codes: *
 *  `PERMISSION_DENIED` if the requesting user is not permitted to access the
 *  requested course or for access errors. * `NOT_FOUND` if no course exists
 *  with the requested ID.
 *
 *  @param identifier Identifier of the course to return. This identifier can be
 *    either the Classroom-assigned identifier or an alias.
 *
 *  @returns GTLRClassroomQuery_CoursesGet
 */
+ (instancetype)queryWithIdentifier:(NSString *)identifier;

@end

/**
 *  Returns a list of courses that the requesting user is permitted to view,
 *  restricted to those that match the request. This method returns the
 *  following error codes: * `PERMISSION_DENIED` for access errors. *
 *  `INVALID_ARGUMENT` if the query argument is malformed. * `NOT_FOUND` if any
 *  users specified in the query arguments do not exist.
 *
 *  Method: classroom.courses.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomCourses
 *    @c kGTLRAuthScopeClassroomCoursesReadonly
 */
@interface GTLRClassroomQuery_CoursesList : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForCoursesList]

/**
 *  Maximum number of items to return. Zero or unspecified indicates that the
 *  server may assign a maximum. The server may return fewer than the specified
 *  number of results.
 */
@property(assign) NSInteger pageSize;

/**
 *  nextPageToken value returned from a previous list call, indicating that the
 *  subsequent page of results should be returned. The list request must be
 *  otherwise identical to the one that resulted in this token.
 */
@property(copy, nullable) NSString *pageToken;

/**
 *  Restricts returned courses to those having a student with the specified
 *  identifier. The identifier can be one of the following: * the numeric
 *  identifier for the user * the email address of the user * the string literal
 *  `"me"`, indicating the requesting user
 */
@property(copy, nullable) NSString *studentId;

/**
 *  Restricts returned courses to those having a teacher with the specified
 *  identifier. The identifier can be one of the following: * the numeric
 *  identifier for the user * the email address of the user * the string literal
 *  `"me"`, indicating the requesting user
 */
@property(copy, nullable) NSString *teacherId;

/**
 *  Fetches a @c GTLRClassroom_ListCoursesResponse.
 *
 *  Returns a list of courses that the requesting user is permitted to view,
 *  restricted to those that match the request. This method returns the
 *  following error codes: * `PERMISSION_DENIED` for access errors. *
 *  `INVALID_ARGUMENT` if the query argument is malformed. * `NOT_FOUND` if any
 *  users specified in the query arguments do not exist.
 *
 *  @returns GTLRClassroomQuery_CoursesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Updates one or more fields in a course. This method returns the following
 *  error codes: * `PERMISSION_DENIED` if the requesting user is not permitted
 *  to modify the requested course or for access errors. * `NOT_FOUND` if no
 *  course exists with the requested ID. * `INVALID_ARGUMENT` if invalid fields
 *  are specified in the update mask or if no update mask is supplied. *
 *  `FAILED_PRECONDITION` for the following request errors: *
 *  CourseNotModifiable
 *
 *  Method: classroom.courses.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomCourses
 */
@interface GTLRClassroomQuery_CoursesPatch : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForCoursesPatchWithObject:identifier:]

/**
 *  Identifier of the course to update. This identifier can be either the
 *  Classroom-assigned identifier or an alias.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(copy, nullable) NSString *identifier;

/**
 *  Mask that identifies which fields on the course to update. This field is
 *  required to do an update. The update will fail if invalid fields are
 *  specified. The following fields are valid: * `name` * `section` *
 *  `descriptionHeading` * `description` * `room` * `courseState` When set in a
 *  query parameter, this field should be specified as `updateMask=,,...`
 */
@property(copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRClassroom_Course.
 *
 *  Updates one or more fields in a course. This method returns the following
 *  error codes: * `PERMISSION_DENIED` if the requesting user is not permitted
 *  to modify the requested course or for access errors. * `NOT_FOUND` if no
 *  course exists with the requested ID. * `INVALID_ARGUMENT` if invalid fields
 *  are specified in the update mask or if no update mask is supplied. *
 *  `FAILED_PRECONDITION` for the following request errors: *
 *  CourseNotModifiable
 *
 *  @param object The @c GTLRClassroom_Course to include in the query.
 *  @param identifier Identifier of the course to update. This identifier can be
 *    either the Classroom-assigned identifier or an alias.
 *
 *  @returns GTLRClassroomQuery_CoursesPatch
 */
+ (instancetype)queryWithObject:(GTLRClassroom_Course *)object
                     identifier:(NSString *)identifier;

@end

/**
 *  Adds a user as a student of a course. This method returns the following
 *  error codes: * `PERMISSION_DENIED` if the requesting user is not permitted
 *  to create students in this course or for access errors. * `NOT_FOUND` if the
 *  requested course ID does not exist. * `FAILED_PRECONDITION` if the requested
 *  user's account is disabled, for the following request errors: *
 *  CourseMemberLimitReached * CourseNotModifiable *
 *  UserGroupsMembershipLimitReached * `ALREADY_EXISTS` if the user is already a
 *  student or teacher in the course.
 *
 *  Method: classroom.courses.students.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomProfileEmails
 *    @c kGTLRAuthScopeClassroomProfilePhotos
 *    @c kGTLRAuthScopeClassroomRosters
 */
@interface GTLRClassroomQuery_CoursesStudentsCreate : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForCoursesStudentsCreateWithObject:courseId:]

/**
 *  Identifier of the course to create the student in. This identifier can be
 *  either the Classroom-assigned identifier or an alias.
 */
@property(copy, nullable) NSString *courseId;

/**
 *  Enrollment code of the course to create the student in. This code is
 *  required if userId corresponds to the requesting user; it may be omitted if
 *  the requesting user has administrative permissions to create students for
 *  any user.
 */
@property(copy, nullable) NSString *enrollmentCode;

/**
 *  Fetches a @c GTLRClassroom_Student.
 *
 *  Adds a user as a student of a course. This method returns the following
 *  error codes: * `PERMISSION_DENIED` if the requesting user is not permitted
 *  to create students in this course or for access errors. * `NOT_FOUND` if the
 *  requested course ID does not exist. * `FAILED_PRECONDITION` if the requested
 *  user's account is disabled, for the following request errors: *
 *  CourseMemberLimitReached * CourseNotModifiable *
 *  UserGroupsMembershipLimitReached * `ALREADY_EXISTS` if the user is already a
 *  student or teacher in the course.
 *
 *  @param object The @c GTLRClassroom_Student to include in the query.
 *  @param courseId Identifier of the course to create the student in. This
 *    identifier can be either the Classroom-assigned identifier or an alias.
 *
 *  @returns GTLRClassroomQuery_CoursesStudentsCreate
 */
+ (instancetype)queryWithObject:(GTLRClassroom_Student *)object
                       courseId:(NSString *)courseId;

@end

/**
 *  Deletes a student of a course. This method returns the following error
 *  codes: * `PERMISSION_DENIED` if the requesting user is not permitted to
 *  delete students of this course or for access errors. * `NOT_FOUND` if no
 *  student of this course has the requested ID or if the course does not exist.
 *
 *  Method: classroom.courses.students.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomRosters
 */
@interface GTLRClassroomQuery_CoursesStudentsDelete : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForCoursesStudentsDeleteWithcourseId:userId:]

/**
 *  Identifier of the course. This identifier can be either the
 *  Classroom-assigned identifier or an alias.
 */
@property(copy, nullable) NSString *courseId;

/**
 *  Identifier of the student to delete. The identifier can be one of the
 *  following: * the numeric identifier for the user * the email address of the
 *  user * the string literal `"me"`, indicating the requesting user
 */
@property(copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRClassroom_Empty.
 *
 *  Deletes a student of a course. This method returns the following error
 *  codes: * `PERMISSION_DENIED` if the requesting user is not permitted to
 *  delete students of this course or for access errors. * `NOT_FOUND` if no
 *  student of this course has the requested ID or if the course does not exist.
 *
 *  @param courseId Identifier of the course. This identifier can be either the
 *    Classroom-assigned identifier or an alias.
 *  @param userId Identifier of the student to delete. The identifier can be one
 *    of the following: * the numeric identifier for the user * the email
 *    address of the user * the string literal `"me"`, indicating the requesting
 *    user
 *
 *  @returns GTLRClassroomQuery_CoursesStudentsDelete
 */
+ (instancetype)queryWithCourseId:(NSString *)courseId
                           userId:(NSString *)userId;

@end

/**
 *  Returns a student of a course. This method returns the following error
 *  codes: * `PERMISSION_DENIED` if the requesting user is not permitted to view
 *  students of this course or for access errors. * `NOT_FOUND` if no student of
 *  this course has the requested ID or if the course does not exist.
 *
 *  Method: classroom.courses.students.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomProfileEmails
 *    @c kGTLRAuthScopeClassroomProfilePhotos
 *    @c kGTLRAuthScopeClassroomRosters
 *    @c kGTLRAuthScopeClassroomRostersReadonly
 */
@interface GTLRClassroomQuery_CoursesStudentsGet : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForCoursesStudentsGetWithcourseId:userId:]

/**
 *  Identifier of the course. This identifier can be either the
 *  Classroom-assigned identifier or an alias.
 */
@property(copy, nullable) NSString *courseId;

/**
 *  Identifier of the student to return. The identifier can be one of the
 *  following: * the numeric identifier for the user * the email address of the
 *  user * the string literal `"me"`, indicating the requesting user
 */
@property(copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRClassroom_Student.
 *
 *  Returns a student of a course. This method returns the following error
 *  codes: * `PERMISSION_DENIED` if the requesting user is not permitted to view
 *  students of this course or for access errors. * `NOT_FOUND` if no student of
 *  this course has the requested ID or if the course does not exist.
 *
 *  @param courseId Identifier of the course. This identifier can be either the
 *    Classroom-assigned identifier or an alias.
 *  @param userId Identifier of the student to return. The identifier can be one
 *    of the following: * the numeric identifier for the user * the email
 *    address of the user * the string literal `"me"`, indicating the requesting
 *    user
 *
 *  @returns GTLRClassroomQuery_CoursesStudentsGet
 */
+ (instancetype)queryWithCourseId:(NSString *)courseId
                           userId:(NSString *)userId;

@end

/**
 *  Returns a list of students of this course that the requester is permitted to
 *  view. This method returns the following error codes: * `NOT_FOUND` if the
 *  course does not exist. * `PERMISSION_DENIED` for access errors.
 *
 *  Method: classroom.courses.students.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomProfileEmails
 *    @c kGTLRAuthScopeClassroomProfilePhotos
 *    @c kGTLRAuthScopeClassroomRosters
 *    @c kGTLRAuthScopeClassroomRostersReadonly
 */
@interface GTLRClassroomQuery_CoursesStudentsList : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForCoursesStudentsListWithcourseId:]

/**
 *  Identifier of the course. This identifier can be either the
 *  Classroom-assigned identifier or an alias.
 */
@property(copy, nullable) NSString *courseId;

/**
 *  Maximum number of items to return. Zero means no maximum. The server may
 *  return fewer than the specified number of results.
 */
@property(assign) NSInteger pageSize;

/**
 *  nextPageToken value returned from a previous list call, indicating that the
 *  subsequent page of results should be returned. The list request must be
 *  otherwise identical to the one that resulted in this token.
 */
@property(copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRClassroom_ListStudentsResponse.
 *
 *  Returns a list of students of this course that the requester is permitted to
 *  view. This method returns the following error codes: * `NOT_FOUND` if the
 *  course does not exist. * `PERMISSION_DENIED` for access errors.
 *
 *  @param courseId Identifier of the course. This identifier can be either the
 *    Classroom-assigned identifier or an alias.
 *
 *  @returns GTLRClassroomQuery_CoursesStudentsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithCourseId:(NSString *)courseId;

@end

/**
 *  Creates a teacher of a course. This method returns the following error
 *  codes: * `PERMISSION_DENIED` if the requesting user is not permitted to
 *  create teachers in this course or for access errors. * `NOT_FOUND` if the
 *  requested course ID does not exist. * `FAILED_PRECONDITION` if the requested
 *  user's account is disabled, for the following request errors: *
 *  CourseMemberLimitReached * CourseNotModifiable * CourseTeacherLimitReached *
 *  UserGroupsMembershipLimitReached * `ALREADY_EXISTS` if the user is already a
 *  teacher or student in the course.
 *
 *  Method: classroom.courses.teachers.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomProfileEmails
 *    @c kGTLRAuthScopeClassroomProfilePhotos
 *    @c kGTLRAuthScopeClassroomRosters
 */
@interface GTLRClassroomQuery_CoursesTeachersCreate : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForCoursesTeachersCreateWithObject:courseId:]

/**
 *  Identifier of the course. This identifier can be either the
 *  Classroom-assigned identifier or an alias.
 */
@property(copy, nullable) NSString *courseId;

/**
 *  Fetches a @c GTLRClassroom_Teacher.
 *
 *  Creates a teacher of a course. This method returns the following error
 *  codes: * `PERMISSION_DENIED` if the requesting user is not permitted to
 *  create teachers in this course or for access errors. * `NOT_FOUND` if the
 *  requested course ID does not exist. * `FAILED_PRECONDITION` if the requested
 *  user's account is disabled, for the following request errors: *
 *  CourseMemberLimitReached * CourseNotModifiable * CourseTeacherLimitReached *
 *  UserGroupsMembershipLimitReached * `ALREADY_EXISTS` if the user is already a
 *  teacher or student in the course.
 *
 *  @param object The @c GTLRClassroom_Teacher to include in the query.
 *  @param courseId Identifier of the course. This identifier can be either the
 *    Classroom-assigned identifier or an alias.
 *
 *  @returns GTLRClassroomQuery_CoursesTeachersCreate
 */
+ (instancetype)queryWithObject:(GTLRClassroom_Teacher *)object
                       courseId:(NSString *)courseId;

@end

/**
 *  Deletes a teacher of a course. This method returns the following error
 *  codes: * `PERMISSION_DENIED` if the requesting user is not permitted to
 *  delete teachers of this course or for access errors. * `NOT_FOUND` if no
 *  teacher of this course has the requested ID or if the course does not exist.
 *  * `FAILED_PRECONDITION` if the requested ID belongs to the primary teacher
 *  of this course.
 *
 *  Method: classroom.courses.teachers.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomRosters
 */
@interface GTLRClassroomQuery_CoursesTeachersDelete : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForCoursesTeachersDeleteWithcourseId:userId:]

/**
 *  Identifier of the course. This identifier can be either the
 *  Classroom-assigned identifier or an alias.
 */
@property(copy, nullable) NSString *courseId;

/**
 *  Identifier of the teacher to delete. The identifier can be one of the
 *  following: * the numeric identifier for the user * the email address of the
 *  user * the string literal `"me"`, indicating the requesting user
 */
@property(copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRClassroom_Empty.
 *
 *  Deletes a teacher of a course. This method returns the following error
 *  codes: * `PERMISSION_DENIED` if the requesting user is not permitted to
 *  delete teachers of this course or for access errors. * `NOT_FOUND` if no
 *  teacher of this course has the requested ID or if the course does not exist.
 *  * `FAILED_PRECONDITION` if the requested ID belongs to the primary teacher
 *  of this course.
 *
 *  @param courseId Identifier of the course. This identifier can be either the
 *    Classroom-assigned identifier or an alias.
 *  @param userId Identifier of the teacher to delete. The identifier can be one
 *    of the following: * the numeric identifier for the user * the email
 *    address of the user * the string literal `"me"`, indicating the requesting
 *    user
 *
 *  @returns GTLRClassroomQuery_CoursesTeachersDelete
 */
+ (instancetype)queryWithCourseId:(NSString *)courseId
                           userId:(NSString *)userId;

@end

/**
 *  Returns a teacher of a course. This method returns the following error
 *  codes: * `PERMISSION_DENIED` if the requesting user is not permitted to view
 *  teachers of this course or for access errors. * `NOT_FOUND` if no teacher of
 *  this course has the requested ID or if the course does not exist.
 *
 *  Method: classroom.courses.teachers.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomProfileEmails
 *    @c kGTLRAuthScopeClassroomProfilePhotos
 *    @c kGTLRAuthScopeClassroomRosters
 *    @c kGTLRAuthScopeClassroomRostersReadonly
 */
@interface GTLRClassroomQuery_CoursesTeachersGet : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForCoursesTeachersGetWithcourseId:userId:]

/**
 *  Identifier of the course. This identifier can be either the
 *  Classroom-assigned identifier or an alias.
 */
@property(copy, nullable) NSString *courseId;

/**
 *  Identifier of the teacher to return. The identifier can be one of the
 *  following: * the numeric identifier for the user * the email address of the
 *  user * the string literal `"me"`, indicating the requesting user
 */
@property(copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRClassroom_Teacher.
 *
 *  Returns a teacher of a course. This method returns the following error
 *  codes: * `PERMISSION_DENIED` if the requesting user is not permitted to view
 *  teachers of this course or for access errors. * `NOT_FOUND` if no teacher of
 *  this course has the requested ID or if the course does not exist.
 *
 *  @param courseId Identifier of the course. This identifier can be either the
 *    Classroom-assigned identifier or an alias.
 *  @param userId Identifier of the teacher to return. The identifier can be one
 *    of the following: * the numeric identifier for the user * the email
 *    address of the user * the string literal `"me"`, indicating the requesting
 *    user
 *
 *  @returns GTLRClassroomQuery_CoursesTeachersGet
 */
+ (instancetype)queryWithCourseId:(NSString *)courseId
                           userId:(NSString *)userId;

@end

/**
 *  Returns a list of teachers of this course that the requester is permitted to
 *  view. This method returns the following error codes: * `NOT_FOUND` if the
 *  course does not exist. * `PERMISSION_DENIED` for access errors.
 *
 *  Method: classroom.courses.teachers.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomProfileEmails
 *    @c kGTLRAuthScopeClassroomProfilePhotos
 *    @c kGTLRAuthScopeClassroomRosters
 *    @c kGTLRAuthScopeClassroomRostersReadonly
 */
@interface GTLRClassroomQuery_CoursesTeachersList : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForCoursesTeachersListWithcourseId:]

/**
 *  Identifier of the course. This identifier can be either the
 *  Classroom-assigned identifier or an alias.
 */
@property(copy, nullable) NSString *courseId;

/**
 *  Maximum number of items to return. Zero means no maximum. The server may
 *  return fewer than the specified number of results.
 */
@property(assign) NSInteger pageSize;

/**
 *  nextPageToken value returned from a previous list call, indicating that the
 *  subsequent page of results should be returned. The list request must be
 *  otherwise identical to the one that resulted in this token.
 */
@property(copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRClassroom_ListTeachersResponse.
 *
 *  Returns a list of teachers of this course that the requester is permitted to
 *  view. This method returns the following error codes: * `NOT_FOUND` if the
 *  course does not exist. * `PERMISSION_DENIED` for access errors.
 *
 *  @param courseId Identifier of the course. This identifier can be either the
 *    Classroom-assigned identifier or an alias.
 *
 *  @returns GTLRClassroomQuery_CoursesTeachersList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithCourseId:(NSString *)courseId;

@end

/**
 *  Updates a course. This method returns the following error codes: *
 *  `PERMISSION_DENIED` if the requesting user is not permitted to modify the
 *  requested course or for access errors. * `NOT_FOUND` if no course exists
 *  with the requested ID. * `FAILED_PRECONDITION` for the following request
 *  errors: * CourseNotModifiable
 *
 *  Method: classroom.courses.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomCourses
 */
@interface GTLRClassroomQuery_CoursesUpdate : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForCoursesUpdateWithObject:identifier:]

/**
 *  Identifier of the course to update. This identifier can be either the
 *  Classroom-assigned identifier or an alias.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(copy, nullable) NSString *identifier;

/**
 *  Fetches a @c GTLRClassroom_Course.
 *
 *  Updates a course. This method returns the following error codes: *
 *  `PERMISSION_DENIED` if the requesting user is not permitted to modify the
 *  requested course or for access errors. * `NOT_FOUND` if no course exists
 *  with the requested ID. * `FAILED_PRECONDITION` for the following request
 *  errors: * CourseNotModifiable
 *
 *  @param object The @c GTLRClassroom_Course to include in the query.
 *  @param identifier Identifier of the course to update. This identifier can be
 *    either the Classroom-assigned identifier or an alias.
 *
 *  @returns GTLRClassroomQuery_CoursesUpdate
 */
+ (instancetype)queryWithObject:(GTLRClassroom_Course *)object
                     identifier:(NSString *)identifier;

@end

/**
 *  Accepts an invitation, removing it and adding the invited user to the
 *  teachers or students (as appropriate) of the specified course. Only the
 *  invited user may accept an invitation. This method returns the following
 *  error codes: * `PERMISSION_DENIED` if the requesting user is not permitted
 *  to accept the requested invitation or for access errors. *
 *  `FAILED_PRECONDITION` for the following request errors: *
 *  CourseMemberLimitReached * CourseNotModifiable * CourseTeacherLimitReached *
 *  UserGroupsMembershipLimitReached * `NOT_FOUND` if no invitation exists with
 *  the requested ID.
 *
 *  Method: classroom.invitations.accept
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomRosters
 */
@interface GTLRClassroomQuery_InvitationsAccept : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForInvitationsAcceptWithidentifier:]

/**
 *  Identifier of the invitation to accept.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(copy, nullable) NSString *identifier;

/**
 *  Fetches a @c GTLRClassroom_Empty.
 *
 *  Accepts an invitation, removing it and adding the invited user to the
 *  teachers or students (as appropriate) of the specified course. Only the
 *  invited user may accept an invitation. This method returns the following
 *  error codes: * `PERMISSION_DENIED` if the requesting user is not permitted
 *  to accept the requested invitation or for access errors. *
 *  `FAILED_PRECONDITION` for the following request errors: *
 *  CourseMemberLimitReached * CourseNotModifiable * CourseTeacherLimitReached *
 *  UserGroupsMembershipLimitReached * `NOT_FOUND` if no invitation exists with
 *  the requested ID.
 *
 *  @param identifier Identifier of the invitation to accept.
 *
 *  @returns GTLRClassroomQuery_InvitationsAccept
 */
+ (instancetype)queryWithIdentifier:(NSString *)identifier;

@end

/**
 *  Creates an invitation. Only one invitation for a user and course may exist
 *  at a time. Delete and re-create an invitation to make changes. This method
 *  returns the following error codes: * `PERMISSION_DENIED` if the requesting
 *  user is not permitted to create invitations for this course or for access
 *  errors. * `NOT_FOUND` if the course or the user does not exist. *
 *  `FAILED_PRECONDITION` if the requested user's account is disabled or if the
 *  user already has this role or a role with greater permissions. *
 *  `ALREADY_EXISTS` if an invitation for the specified user and course already
 *  exists.
 *
 *  Method: classroom.invitations.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomRosters
 */
@interface GTLRClassroomQuery_InvitationsCreate : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForInvitationsCreateWithObject:]

/**
 *  Fetches a @c GTLRClassroom_Invitation.
 *
 *  Creates an invitation. Only one invitation for a user and course may exist
 *  at a time. Delete and re-create an invitation to make changes. This method
 *  returns the following error codes: * `PERMISSION_DENIED` if the requesting
 *  user is not permitted to create invitations for this course or for access
 *  errors. * `NOT_FOUND` if the course or the user does not exist. *
 *  `FAILED_PRECONDITION` if the requested user's account is disabled or if the
 *  user already has this role or a role with greater permissions. *
 *  `ALREADY_EXISTS` if an invitation for the specified user and course already
 *  exists.
 *
 *  @param object The @c GTLRClassroom_Invitation to include in the query.
 *
 *  @returns GTLRClassroomQuery_InvitationsCreate
 */
+ (instancetype)queryWithObject:(GTLRClassroom_Invitation *)object;

@end

/**
 *  Deletes an invitation. This method returns the following error codes: *
 *  `PERMISSION_DENIED` if the requesting user is not permitted to delete the
 *  requested invitation or for access errors. * `NOT_FOUND` if no invitation
 *  exists with the requested ID.
 *
 *  Method: classroom.invitations.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomRosters
 */
@interface GTLRClassroomQuery_InvitationsDelete : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForInvitationsDeleteWithidentifier:]

/**
 *  Identifier of the invitation to delete.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(copy, nullable) NSString *identifier;

/**
 *  Fetches a @c GTLRClassroom_Empty.
 *
 *  Deletes an invitation. This method returns the following error codes: *
 *  `PERMISSION_DENIED` if the requesting user is not permitted to delete the
 *  requested invitation or for access errors. * `NOT_FOUND` if no invitation
 *  exists with the requested ID.
 *
 *  @param identifier Identifier of the invitation to delete.
 *
 *  @returns GTLRClassroomQuery_InvitationsDelete
 */
+ (instancetype)queryWithIdentifier:(NSString *)identifier;

@end

/**
 *  Returns an invitation. This method returns the following error codes: *
 *  `PERMISSION_DENIED` if the requesting user is not permitted to view the
 *  requested invitation or for access errors. * `NOT_FOUND` if no invitation
 *  exists with the requested ID.
 *
 *  Method: classroom.invitations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomRosters
 *    @c kGTLRAuthScopeClassroomRostersReadonly
 */
@interface GTLRClassroomQuery_InvitationsGet : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForInvitationsGetWithidentifier:]

/**
 *  Identifier of the invitation to return.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(copy, nullable) NSString *identifier;

/**
 *  Fetches a @c GTLRClassroom_Invitation.
 *
 *  Returns an invitation. This method returns the following error codes: *
 *  `PERMISSION_DENIED` if the requesting user is not permitted to view the
 *  requested invitation or for access errors. * `NOT_FOUND` if no invitation
 *  exists with the requested ID.
 *
 *  @param identifier Identifier of the invitation to return.
 *
 *  @returns GTLRClassroomQuery_InvitationsGet
 */
+ (instancetype)queryWithIdentifier:(NSString *)identifier;

@end

/**
 *  Returns a list of invitations that the requesting user is permitted to view,
 *  restricted to those that match the list request. *Note:* At least one of
 *  `user_id` or `course_id` must be supplied. Both fields can be supplied. This
 *  method returns the following error codes: * `PERMISSION_DENIED` for access
 *  errors.
 *
 *  Method: classroom.invitations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomRosters
 *    @c kGTLRAuthScopeClassroomRostersReadonly
 */
@interface GTLRClassroomQuery_InvitationsList : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForInvitationsList]

/**
 *  Restricts returned invitations to those for a course with the specified
 *  identifier.
 */
@property(copy, nullable) NSString *courseId;

/**
 *  Maximum number of items to return. Zero means no maximum. The server may
 *  return fewer than the specified number of results.
 */
@property(assign) NSInteger pageSize;

/**
 *  nextPageToken value returned from a previous list call, indicating that the
 *  subsequent page of results should be returned. The list request must be
 *  otherwise identical to the one that resulted in this token.
 */
@property(copy, nullable) NSString *pageToken;

/**
 *  Restricts returned invitations to those for a specific user. The identifier
 *  can be one of the following: * the numeric identifier for the user * the
 *  email address of the user * the string literal `"me"`, indicating the
 *  requesting user
 */
@property(copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRClassroom_ListInvitationsResponse.
 *
 *  Returns a list of invitations that the requesting user is permitted to view,
 *  restricted to those that match the list request. *Note:* At least one of
 *  `user_id` or `course_id` must be supplied. Both fields can be supplied. This
 *  method returns the following error codes: * `PERMISSION_DENIED` for access
 *  errors.
 *
 *  @returns GTLRClassroomQuery_InvitationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Returns a user profile. This method returns the following error codes: *
 *  `PERMISSION_DENIED` if the requesting user is not permitted to access this
 *  user profile or if no profile exists with the requested ID or for access
 *  errors.
 *
 *  Method: classroom.userProfiles.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomProfileEmails
 *    @c kGTLRAuthScopeClassroomProfilePhotos
 *    @c kGTLRAuthScopeClassroomRosters
 *    @c kGTLRAuthScopeClassroomRostersReadonly
 */
@interface GTLRClassroomQuery_UserProfilesGet : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForUserProfilesGetWithuserId:]

/**
 *  Identifier of the profile to return. The identifier can be one of the
 *  following: * the numeric identifier for the user * the email address of the
 *  user * the string literal `"me"`, indicating the requesting user
 */
@property(copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRClassroom_UserProfile.
 *
 *  Returns a user profile. This method returns the following error codes: *
 *  `PERMISSION_DENIED` if the requesting user is not permitted to access this
 *  user profile or if no profile exists with the requested ID or for access
 *  errors.
 *
 *  @param userId Identifier of the profile to return. The identifier can be one
 *    of the following: * the numeric identifier for the user * the email
 *    address of the user * the string literal `"me"`, indicating the requesting
 *    user
 *
 *  @returns GTLRClassroomQuery_UserProfilesGet
 */
+ (instancetype)queryWithUserId:(NSString *)userId;

@end

NS_ASSUME_NONNULL_END
