// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Classroom API (classroom/v1)
// Description:
//   Manages classes, rosters, and invitations in Google Classroom.
// Documentation:
//   https://developers.google.com/classroom/

#import "GTLRClassroomQuery.h"

#import "GTLRClassroomObjects.h"

@implementation GTLRClassroomQuery

@dynamic fields;

@end

@implementation GTLRClassroomQuery_CoursesAliasesCreate

@dynamic courseId;

+ (instancetype)queryWithObject:(GTLRClassroom_CourseAlias *)object
                       courseId:(NSString *)courseId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"courseId" ];
  NSString *pathURITemplate = @"v1/courses/{courseId}/aliases";
  GTLRClassroomQuery_CoursesAliasesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.courseId = courseId;
  query.expectedObjectClass = [GTLRClassroom_CourseAlias class];
  query.loggingName = @"classroom.courses.aliases.create";
  return query;
}

@end

@implementation GTLRClassroomQuery_CoursesAliasesDelete

@dynamic alias, courseId;

+ (instancetype)queryWithCourseId:(NSString *)courseId
                            alias:(NSString *)alias {
  NSArray *pathParams = @[
    @"alias", @"courseId"
  ];
  NSString *pathURITemplate = @"v1/courses/{courseId}/aliases/{alias}";
  GTLRClassroomQuery_CoursesAliasesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.courseId = courseId;
  query.alias = alias;
  query.expectedObjectClass = [GTLRClassroom_Empty class];
  query.loggingName = @"classroom.courses.aliases.delete";
  return query;
}

@end

@implementation GTLRClassroomQuery_CoursesAliasesList

@dynamic courseId, pageSize, pageToken;

+ (instancetype)queryWithCourseId:(NSString *)courseId {
  NSArray *pathParams = @[ @"courseId" ];
  NSString *pathURITemplate = @"v1/courses/{courseId}/aliases";
  GTLRClassroomQuery_CoursesAliasesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.courseId = courseId;
  query.expectedObjectClass = [GTLRClassroom_ListCourseAliasesResponse class];
  query.loggingName = @"classroom.courses.aliases.list";
  return query;
}

@end

@implementation GTLRClassroomQuery_CoursesCreate

+ (instancetype)queryWithObject:(GTLRClassroom_Course *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"v1/courses";
  GTLRClassroomQuery_CoursesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRClassroom_Course class];
  query.loggingName = @"classroom.courses.create";
  return query;
}

@end

@implementation GTLRClassroomQuery_CoursesDelete

@dynamic identifier;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithIdentifier:(NSString *)identifier {
  NSArray *pathParams = @[ @"id" ];
  NSString *pathURITemplate = @"v1/courses/{id}";
  GTLRClassroomQuery_CoursesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRClassroom_Empty class];
  query.loggingName = @"classroom.courses.delete";
  return query;
}

@end

@implementation GTLRClassroomQuery_CoursesGet

@dynamic identifier;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithIdentifier:(NSString *)identifier {
  NSArray *pathParams = @[ @"id" ];
  NSString *pathURITemplate = @"v1/courses/{id}";
  GTLRClassroomQuery_CoursesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRClassroom_Course class];
  query.loggingName = @"classroom.courses.get";
  return query;
}

@end

@implementation GTLRClassroomQuery_CoursesList

@dynamic pageSize, pageToken, studentId, teacherId;

+ (instancetype)query {
  NSString *pathURITemplate = @"v1/courses";
  GTLRClassroomQuery_CoursesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRClassroom_ListCoursesResponse class];
  query.loggingName = @"classroom.courses.list";
  return query;
}

@end

@implementation GTLRClassroomQuery_CoursesPatch

@dynamic identifier, updateMask;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithObject:(GTLRClassroom_Course *)object
                     identifier:(NSString *)identifier {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"id" ];
  NSString *pathURITemplate = @"v1/courses/{id}";
  GTLRClassroomQuery_CoursesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRClassroom_Course class];
  query.loggingName = @"classroom.courses.patch";
  return query;
}

@end

@implementation GTLRClassroomQuery_CoursesStudentsCreate

@dynamic courseId, enrollmentCode;

+ (instancetype)queryWithObject:(GTLRClassroom_Student *)object
                       courseId:(NSString *)courseId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"courseId" ];
  NSString *pathURITemplate = @"v1/courses/{courseId}/students";
  GTLRClassroomQuery_CoursesStudentsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.courseId = courseId;
  query.expectedObjectClass = [GTLRClassroom_Student class];
  query.loggingName = @"classroom.courses.students.create";
  return query;
}

@end

@implementation GTLRClassroomQuery_CoursesStudentsDelete

@dynamic courseId, userId;

+ (instancetype)queryWithCourseId:(NSString *)courseId
                           userId:(NSString *)userId {
  NSArray *pathParams = @[
    @"courseId", @"userId"
  ];
  NSString *pathURITemplate = @"v1/courses/{courseId}/students/{userId}";
  GTLRClassroomQuery_CoursesStudentsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.courseId = courseId;
  query.userId = userId;
  query.expectedObjectClass = [GTLRClassroom_Empty class];
  query.loggingName = @"classroom.courses.students.delete";
  return query;
}

@end

@implementation GTLRClassroomQuery_CoursesStudentsGet

@dynamic courseId, userId;

+ (instancetype)queryWithCourseId:(NSString *)courseId
                           userId:(NSString *)userId {
  NSArray *pathParams = @[
    @"courseId", @"userId"
  ];
  NSString *pathURITemplate = @"v1/courses/{courseId}/students/{userId}";
  GTLRClassroomQuery_CoursesStudentsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.courseId = courseId;
  query.userId = userId;
  query.expectedObjectClass = [GTLRClassroom_Student class];
  query.loggingName = @"classroom.courses.students.get";
  return query;
}

@end

@implementation GTLRClassroomQuery_CoursesStudentsList

@dynamic courseId, pageSize, pageToken;

+ (instancetype)queryWithCourseId:(NSString *)courseId {
  NSArray *pathParams = @[ @"courseId" ];
  NSString *pathURITemplate = @"v1/courses/{courseId}/students";
  GTLRClassroomQuery_CoursesStudentsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.courseId = courseId;
  query.expectedObjectClass = [GTLRClassroom_ListStudentsResponse class];
  query.loggingName = @"classroom.courses.students.list";
  return query;
}

@end

@implementation GTLRClassroomQuery_CoursesTeachersCreate

@dynamic courseId;

+ (instancetype)queryWithObject:(GTLRClassroom_Teacher *)object
                       courseId:(NSString *)courseId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"courseId" ];
  NSString *pathURITemplate = @"v1/courses/{courseId}/teachers";
  GTLRClassroomQuery_CoursesTeachersCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.courseId = courseId;
  query.expectedObjectClass = [GTLRClassroom_Teacher class];
  query.loggingName = @"classroom.courses.teachers.create";
  return query;
}

@end

@implementation GTLRClassroomQuery_CoursesTeachersDelete

@dynamic courseId, userId;

+ (instancetype)queryWithCourseId:(NSString *)courseId
                           userId:(NSString *)userId {
  NSArray *pathParams = @[
    @"courseId", @"userId"
  ];
  NSString *pathURITemplate = @"v1/courses/{courseId}/teachers/{userId}";
  GTLRClassroomQuery_CoursesTeachersDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.courseId = courseId;
  query.userId = userId;
  query.expectedObjectClass = [GTLRClassroom_Empty class];
  query.loggingName = @"classroom.courses.teachers.delete";
  return query;
}

@end

@implementation GTLRClassroomQuery_CoursesTeachersGet

@dynamic courseId, userId;

+ (instancetype)queryWithCourseId:(NSString *)courseId
                           userId:(NSString *)userId {
  NSArray *pathParams = @[
    @"courseId", @"userId"
  ];
  NSString *pathURITemplate = @"v1/courses/{courseId}/teachers/{userId}";
  GTLRClassroomQuery_CoursesTeachersGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.courseId = courseId;
  query.userId = userId;
  query.expectedObjectClass = [GTLRClassroom_Teacher class];
  query.loggingName = @"classroom.courses.teachers.get";
  return query;
}

@end

@implementation GTLRClassroomQuery_CoursesTeachersList

@dynamic courseId, pageSize, pageToken;

+ (instancetype)queryWithCourseId:(NSString *)courseId {
  NSArray *pathParams = @[ @"courseId" ];
  NSString *pathURITemplate = @"v1/courses/{courseId}/teachers";
  GTLRClassroomQuery_CoursesTeachersList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.courseId = courseId;
  query.expectedObjectClass = [GTLRClassroom_ListTeachersResponse class];
  query.loggingName = @"classroom.courses.teachers.list";
  return query;
}

@end

@implementation GTLRClassroomQuery_CoursesUpdate

@dynamic identifier;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithObject:(GTLRClassroom_Course *)object
                     identifier:(NSString *)identifier {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"id" ];
  NSString *pathURITemplate = @"v1/courses/{id}";
  GTLRClassroomQuery_CoursesUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRClassroom_Course class];
  query.loggingName = @"classroom.courses.update";
  return query;
}

@end

@implementation GTLRClassroomQuery_InvitationsAccept

@dynamic identifier;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithIdentifier:(NSString *)identifier {
  NSArray *pathParams = @[ @"id" ];
  NSString *pathURITemplate = @"v1/invitations/{id}:accept";
  GTLRClassroomQuery_InvitationsAccept *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRClassroom_Empty class];
  query.loggingName = @"classroom.invitations.accept";
  return query;
}

@end

@implementation GTLRClassroomQuery_InvitationsCreate

+ (instancetype)queryWithObject:(GTLRClassroom_Invitation *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"v1/invitations";
  GTLRClassroomQuery_InvitationsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRClassroom_Invitation class];
  query.loggingName = @"classroom.invitations.create";
  return query;
}

@end

@implementation GTLRClassroomQuery_InvitationsDelete

@dynamic identifier;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithIdentifier:(NSString *)identifier {
  NSArray *pathParams = @[ @"id" ];
  NSString *pathURITemplate = @"v1/invitations/{id}";
  GTLRClassroomQuery_InvitationsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRClassroom_Empty class];
  query.loggingName = @"classroom.invitations.delete";
  return query;
}

@end

@implementation GTLRClassroomQuery_InvitationsGet

@dynamic identifier;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithIdentifier:(NSString *)identifier {
  NSArray *pathParams = @[ @"id" ];
  NSString *pathURITemplate = @"v1/invitations/{id}";
  GTLRClassroomQuery_InvitationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRClassroom_Invitation class];
  query.loggingName = @"classroom.invitations.get";
  return query;
}

@end

@implementation GTLRClassroomQuery_InvitationsList

@dynamic courseId, pageSize, pageToken, userId;

+ (instancetype)query {
  NSString *pathURITemplate = @"v1/invitations";
  GTLRClassroomQuery_InvitationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRClassroom_ListInvitationsResponse class];
  query.loggingName = @"classroom.invitations.list";
  return query;
}

@end

@implementation GTLRClassroomQuery_UserProfilesGet

@dynamic userId;

+ (instancetype)queryWithUserId:(NSString *)userId {
  NSArray *pathParams = @[ @"userId" ];
  NSString *pathURITemplate = @"v1/userProfiles/{userId}";
  GTLRClassroomQuery_UserProfilesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.userId = userId;
  query.expectedObjectClass = [GTLRClassroom_UserProfile class];
  query.loggingName = @"classroom.userProfiles.get";
  return query;
}

@end
