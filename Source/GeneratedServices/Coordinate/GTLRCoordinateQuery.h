// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Maps Coordinate API (coordinate/v1)
// Description:
//   Lets you view and manage jobs in a Coordinate team.
// Documentation:
//   https://developers.google.com/coordinate/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRCoordinate_Job;
@class GTLRCoordinate_Schedule;

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// progress

/**
 *  Completed
 *
 *  Value: "COMPLETED"
 */
GTLR_EXTERN NSString * const kGTLRCoordinateProgressCompleted;
/**
 *  In progress
 *
 *  Value: "IN_PROGRESS"
 */
GTLR_EXTERN NSString * const kGTLRCoordinateProgressInProgress;
/**
 *  Not accepted
 *
 *  Value: "NOT_ACCEPTED"
 */
GTLR_EXTERN NSString * const kGTLRCoordinateProgressNotAccepted;
/**
 *  Not started
 *
 *  Value: "NOT_STARTED"
 */
GTLR_EXTERN NSString * const kGTLRCoordinateProgressNotStarted;
/**
 *  Obsolete
 *
 *  Value: "OBSOLETE"
 */
GTLR_EXTERN NSString * const kGTLRCoordinateProgressObsolete;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other Coordinate query classes.
 */
@interface GTLRCoordinateQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(copy, nullable) NSString *fields;

@end

/**
 *  Retrieves a list of custom field definitions for a team.
 *
 *  Method: coordinate.customFieldDef.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCoordinate
 *    @c kGTLRAuthScopeCoordinateReadonly
 */
@interface GTLRCoordinateQuery_CustomFieldDefList : GTLRCoordinateQuery
// Previous library name was
//   +[GTLQueryCoordinate queryForCustomFieldDefListWithteamId:]

/** Team ID */
@property(copy, nullable) NSString *teamId;

/**
 *  Fetches a @c GTLRCoordinate_CustomFieldDefListResponse.
 *
 *  Retrieves a list of custom field definitions for a team.
 *
 *  @param teamId Team ID
 *
 *  @returns GTLRCoordinateQuery_CustomFieldDefList
 */
+ (instancetype)queryWithTeamId:(NSString *)teamId;

@end

/**
 *  Retrieves a job, including all the changes made to the job.
 *
 *  Method: coordinate.jobs.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCoordinate
 *    @c kGTLRAuthScopeCoordinateReadonly
 */
@interface GTLRCoordinateQuery_JobsGet : GTLRCoordinateQuery
// Previous library name was
//   +[GTLQueryCoordinate queryForJobsGetWithteamId:jobId:]

/** Job number */
@property(assign) unsigned long long jobId;

/** Team ID */
@property(copy, nullable) NSString *teamId;

/**
 *  Fetches a @c GTLRCoordinate_Job.
 *
 *  Retrieves a job, including all the changes made to the job.
 *
 *  @param teamId Team ID
 *  @param jobId Job number
 *
 *  @returns GTLRCoordinateQuery_JobsGet
 */
+ (instancetype)queryWithTeamId:(NSString *)teamId
                          jobId:(unsigned long long)jobId;

@end

/**
 *  Inserts a new job. Only the state field of the job should be set.
 *
 *  Method: coordinate.jobs.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCoordinate
 */
@interface GTLRCoordinateQuery_JobsInsert : GTLRCoordinateQuery
// Previous library name was
//   +[GTLQueryCoordinate queryForJobsInsertWithObject:teamId:address:lat:lng:title:]

/** Job address as newline (Unix) separated string */
@property(copy, nullable) NSString *address;

/** Assignee email address, or empty string to unassign. */
@property(copy, nullable) NSString *assignee;

/** Customer name */
@property(copy, nullable) NSString *customerName;

/** Customer phone number */
@property(copy, nullable) NSString *customerPhoneNumber;

/**
 *  Sets the value of custom fields. To set a custom field, pass the field id
 *  (from /team/teamId/custom_fields), a URL escaped '=' character, and the
 *  desired value as a parameter. For example, customField=12%3DAlice. Repeat
 *  the parameter for each custom field. Note that '=' cannot appear in the
 *  parameter value. Specifying an invalid, or inactive enum field will result
 *  in an error 500.
 */
@property(strong, nullable) NSArray<NSString *> *customField;

/** The latitude coordinate of this job's location. */
@property(assign) double lat;

/** The longitude coordinate of this job's location. */
@property(assign) double lng;

/** Job note as newline (Unix) separated string */
@property(copy, nullable) NSString *note;

/** Team ID */
@property(copy, nullable) NSString *teamId;

/** Job title */
@property(copy, nullable) NSString *title;

/**
 *  Fetches a @c GTLRCoordinate_Job.
 *
 *  Inserts a new job. Only the state field of the job should be set.
 *
 *  @param object The @c GTLRCoordinate_Job to include in the query.
 *  @param teamId Team ID
 *  @param address Job address as newline (Unix) separated string
 *  @param lat The latitude coordinate of this job's location.
 *  @param lng The longitude coordinate of this job's location.
 *  @param title Job title
 *
 *  @returns GTLRCoordinateQuery_JobsInsert
 */
+ (instancetype)queryWithObject:(GTLRCoordinate_Job *)object
                         teamId:(NSString *)teamId
                        address:(NSString *)address
                            lat:(double)lat
                            lng:(double)lng
                          title:(NSString *)title;

@end

/**
 *  Retrieves jobs created or modified since the given timestamp.
 *
 *  Method: coordinate.jobs.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCoordinate
 *    @c kGTLRAuthScopeCoordinateReadonly
 */
@interface GTLRCoordinateQuery_JobsList : GTLRCoordinateQuery
// Previous library name was
//   +[GTLQueryCoordinate queryForJobsListWithteamId:]

/** Maximum number of results to return in one page. */
@property(assign) NSUInteger maxResults;

/** Minimum time a job was modified in milliseconds since epoch. */
@property(assign) unsigned long long minModifiedTimestampMs;

/** Whether to omit detail job history information. */
@property(assign) BOOL omitJobChanges;

/** Continuation token */
@property(copy, nullable) NSString *pageToken;

/** Team ID */
@property(copy, nullable) NSString *teamId;

/**
 *  Fetches a @c GTLRCoordinate_JobListResponse.
 *
 *  Retrieves jobs created or modified since the given timestamp.
 *
 *  @param teamId Team ID
 *
 *  @returns GTLRCoordinateQuery_JobsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithTeamId:(NSString *)teamId;

@end

/**
 *  Updates a job. Fields that are set in the job state will be updated. This
 *  method supports patch semantics.
 *
 *  Method: coordinate.jobs.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCoordinate
 */
@interface GTLRCoordinateQuery_JobsPatch : GTLRCoordinateQuery
// Previous library name was
//   +[GTLQueryCoordinate queryForJobsPatchWithObject:teamId:jobId:]

/** Job address as newline (Unix) separated string */
@property(copy, nullable) NSString *address;

/** Assignee email address, or empty string to unassign. */
@property(copy, nullable) NSString *assignee;

/** Customer name */
@property(copy, nullable) NSString *customerName;

/** Customer phone number */
@property(copy, nullable) NSString *customerPhoneNumber;

/**
 *  Sets the value of custom fields. To set a custom field, pass the field id
 *  (from /team/teamId/custom_fields), a URL escaped '=' character, and the
 *  desired value as a parameter. For example, customField=12%3DAlice. Repeat
 *  the parameter for each custom field. Note that '=' cannot appear in the
 *  parameter value. Specifying an invalid, or inactive enum field will result
 *  in an error 500.
 */
@property(strong, nullable) NSArray<NSString *> *customField;

/** Job number */
@property(assign) unsigned long long jobId;

/** The latitude coordinate of this job's location. */
@property(assign) double lat;

/** The longitude coordinate of this job's location. */
@property(assign) double lng;

/** Job note as newline (Unix) separated string */
@property(copy, nullable) NSString *note;

/**
 *  Job progress
 *
 *  Likely values:
 *    @arg @c kGTLRCoordinateProgressCompleted Completed (Value: "COMPLETED")
 *    @arg @c kGTLRCoordinateProgressInProgress In progress (Value:
 *        "IN_PROGRESS")
 *    @arg @c kGTLRCoordinateProgressNotAccepted Not accepted (Value:
 *        "NOT_ACCEPTED")
 *    @arg @c kGTLRCoordinateProgressNotStarted Not started (Value:
 *        "NOT_STARTED")
 *    @arg @c kGTLRCoordinateProgressObsolete Obsolete (Value: "OBSOLETE")
 */
@property(copy, nullable) NSString *progress;

/** Team ID */
@property(copy, nullable) NSString *teamId;

/** Job title */
@property(copy, nullable) NSString *title;

/**
 *  Fetches a @c GTLRCoordinate_Job.
 *
 *  Updates a job. Fields that are set in the job state will be updated. This
 *  method supports patch semantics.
 *
 *  @param object The @c GTLRCoordinate_Job to include in the query.
 *  @param teamId Team ID
 *  @param jobId Job number
 *
 *  @returns GTLRCoordinateQuery_JobsPatch
 */
+ (instancetype)queryWithObject:(GTLRCoordinate_Job *)object
                         teamId:(NSString *)teamId
                          jobId:(unsigned long long)jobId;

@end

/**
 *  Updates a job. Fields that are set in the job state will be updated.
 *
 *  Method: coordinate.jobs.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCoordinate
 */
@interface GTLRCoordinateQuery_JobsUpdate : GTLRCoordinateQuery
// Previous library name was
//   +[GTLQueryCoordinate queryForJobsUpdateWithObject:teamId:jobId:]

/** Job address as newline (Unix) separated string */
@property(copy, nullable) NSString *address;

/** Assignee email address, or empty string to unassign. */
@property(copy, nullable) NSString *assignee;

/** Customer name */
@property(copy, nullable) NSString *customerName;

/** Customer phone number */
@property(copy, nullable) NSString *customerPhoneNumber;

/**
 *  Sets the value of custom fields. To set a custom field, pass the field id
 *  (from /team/teamId/custom_fields), a URL escaped '=' character, and the
 *  desired value as a parameter. For example, customField=12%3DAlice. Repeat
 *  the parameter for each custom field. Note that '=' cannot appear in the
 *  parameter value. Specifying an invalid, or inactive enum field will result
 *  in an error 500.
 */
@property(strong, nullable) NSArray<NSString *> *customField;

/** Job number */
@property(assign) unsigned long long jobId;

/** The latitude coordinate of this job's location. */
@property(assign) double lat;

/** The longitude coordinate of this job's location. */
@property(assign) double lng;

/** Job note as newline (Unix) separated string */
@property(copy, nullable) NSString *note;

/**
 *  Job progress
 *
 *  Likely values:
 *    @arg @c kGTLRCoordinateProgressCompleted Completed (Value: "COMPLETED")
 *    @arg @c kGTLRCoordinateProgressInProgress In progress (Value:
 *        "IN_PROGRESS")
 *    @arg @c kGTLRCoordinateProgressNotAccepted Not accepted (Value:
 *        "NOT_ACCEPTED")
 *    @arg @c kGTLRCoordinateProgressNotStarted Not started (Value:
 *        "NOT_STARTED")
 *    @arg @c kGTLRCoordinateProgressObsolete Obsolete (Value: "OBSOLETE")
 */
@property(copy, nullable) NSString *progress;

/** Team ID */
@property(copy, nullable) NSString *teamId;

/** Job title */
@property(copy, nullable) NSString *title;

/**
 *  Fetches a @c GTLRCoordinate_Job.
 *
 *  Updates a job. Fields that are set in the job state will be updated.
 *
 *  @param object The @c GTLRCoordinate_Job to include in the query.
 *  @param teamId Team ID
 *  @param jobId Job number
 *
 *  @returns GTLRCoordinateQuery_JobsUpdate
 */
+ (instancetype)queryWithObject:(GTLRCoordinate_Job *)object
                         teamId:(NSString *)teamId
                          jobId:(unsigned long long)jobId;

@end

/**
 *  Retrieves a list of locations for a worker.
 *
 *  Method: coordinate.location.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCoordinate
 *    @c kGTLRAuthScopeCoordinateReadonly
 */
@interface GTLRCoordinateQuery_LocationList : GTLRCoordinateQuery
// Previous library name was
//   +[GTLQueryCoordinate queryForLocationListWithteamId:workerEmail:startTimestampMs:]

/** Maximum number of results to return in one page. */
@property(assign) NSUInteger maxResults;

/** Continuation token */
@property(copy, nullable) NSString *pageToken;

/** Start timestamp in milliseconds since the epoch. */
@property(assign) unsigned long long startTimestampMs;

/** Team ID */
@property(copy, nullable) NSString *teamId;

/** Worker email address. */
@property(copy, nullable) NSString *workerEmail;

/**
 *  Fetches a @c GTLRCoordinate_LocationListResponse.
 *
 *  Retrieves a list of locations for a worker.
 *
 *  @param teamId Team ID
 *  @param workerEmail Worker email address.
 *  @param startTimestampMs Start timestamp in milliseconds since the epoch.
 *
 *  @returns GTLRCoordinateQuery_LocationList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithTeamId:(NSString *)teamId
                    workerEmail:(NSString *)workerEmail
               startTimestampMs:(unsigned long long)startTimestampMs;

@end

/**
 *  Retrieves the schedule for a job.
 *
 *  Method: coordinate.schedule.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCoordinate
 *    @c kGTLRAuthScopeCoordinateReadonly
 */
@interface GTLRCoordinateQuery_ScheduleGet : GTLRCoordinateQuery
// Previous library name was
//   +[GTLQueryCoordinate queryForScheduleGetWithteamId:jobId:]

/** Job number */
@property(assign) unsigned long long jobId;

/** Team ID */
@property(copy, nullable) NSString *teamId;

/**
 *  Fetches a @c GTLRCoordinate_Schedule.
 *
 *  Retrieves the schedule for a job.
 *
 *  @param teamId Team ID
 *  @param jobId Job number
 *
 *  @returns GTLRCoordinateQuery_ScheduleGet
 */
+ (instancetype)queryWithTeamId:(NSString *)teamId
                          jobId:(unsigned long long)jobId;

@end

/**
 *  Replaces the schedule of a job with the provided schedule. This method
 *  supports patch semantics.
 *
 *  Method: coordinate.schedule.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCoordinate
 */
@interface GTLRCoordinateQuery_SchedulePatch : GTLRCoordinateQuery
// Previous library name was
//   +[GTLQueryCoordinate queryForSchedulePatchWithObject:teamId:jobId:]

/**
 *  Whether the job is scheduled for the whole day. Time of day in start/end
 *  times is ignored if this is true.
 */
@property(assign) BOOL allDay;

/** Job duration in milliseconds. */
@property(assign) unsigned long long duration;

/** Scheduled end time in milliseconds since epoch. */
@property(assign) unsigned long long endTime;

/** Job number */
@property(assign) unsigned long long jobId;

/** Scheduled start time in milliseconds since epoch. */
@property(assign) unsigned long long startTime;

/** Team ID */
@property(copy, nullable) NSString *teamId;

/**
 *  Fetches a @c GTLRCoordinate_Schedule.
 *
 *  Replaces the schedule of a job with the provided schedule. This method
 *  supports patch semantics.
 *
 *  @param object The @c GTLRCoordinate_Schedule to include in the query.
 *  @param teamId Team ID
 *  @param jobId Job number
 *
 *  @returns GTLRCoordinateQuery_SchedulePatch
 */
+ (instancetype)queryWithObject:(GTLRCoordinate_Schedule *)object
                         teamId:(NSString *)teamId
                          jobId:(unsigned long long)jobId;

@end

/**
 *  Replaces the schedule of a job with the provided schedule.
 *
 *  Method: coordinate.schedule.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCoordinate
 */
@interface GTLRCoordinateQuery_ScheduleUpdate : GTLRCoordinateQuery
// Previous library name was
//   +[GTLQueryCoordinate queryForScheduleUpdateWithObject:teamId:jobId:]

/**
 *  Whether the job is scheduled for the whole day. Time of day in start/end
 *  times is ignored if this is true.
 */
@property(assign) BOOL allDay;

/** Job duration in milliseconds. */
@property(assign) unsigned long long duration;

/** Scheduled end time in milliseconds since epoch. */
@property(assign) unsigned long long endTime;

/** Job number */
@property(assign) unsigned long long jobId;

/** Scheduled start time in milliseconds since epoch. */
@property(assign) unsigned long long startTime;

/** Team ID */
@property(copy, nullable) NSString *teamId;

/**
 *  Fetches a @c GTLRCoordinate_Schedule.
 *
 *  Replaces the schedule of a job with the provided schedule.
 *
 *  @param object The @c GTLRCoordinate_Schedule to include in the query.
 *  @param teamId Team ID
 *  @param jobId Job number
 *
 *  @returns GTLRCoordinateQuery_ScheduleUpdate
 */
+ (instancetype)queryWithObject:(GTLRCoordinate_Schedule *)object
                         teamId:(NSString *)teamId
                          jobId:(unsigned long long)jobId;

@end

/**
 *  Retrieves a list of teams for a user.
 *
 *  Method: coordinate.team.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCoordinate
 *    @c kGTLRAuthScopeCoordinateReadonly
 */
@interface GTLRCoordinateQuery_TeamList : GTLRCoordinateQuery
// Previous library name was
//   +[GTLQueryCoordinate queryForTeamList]

/** Whether to include teams for which the user has the Admin role. */
@property(assign) BOOL admin;

/** Whether to include teams for which the user has the Dispatcher role. */
@property(assign) BOOL dispatcher;

/** Whether to include teams for which the user has the Worker role. */
@property(assign) BOOL worker;

/**
 *  Fetches a @c GTLRCoordinate_TeamListResponse.
 *
 *  Retrieves a list of teams for a user.
 *
 *  @returns GTLRCoordinateQuery_TeamList
 */
+ (instancetype)query;

@end

/**
 *  Retrieves a list of workers in a team.
 *
 *  Method: coordinate.worker.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCoordinate
 *    @c kGTLRAuthScopeCoordinateReadonly
 */
@interface GTLRCoordinateQuery_WorkerList : GTLRCoordinateQuery
// Previous library name was
//   +[GTLQueryCoordinate queryForWorkerListWithteamId:]

/** Team ID */
@property(copy, nullable) NSString *teamId;

/**
 *  Fetches a @c GTLRCoordinate_WorkerListResponse.
 *
 *  Retrieves a list of workers in a team.
 *
 *  @param teamId Team ID
 *
 *  @returns GTLRCoordinateQuery_WorkerList
 */
+ (instancetype)queryWithTeamId:(NSString *)teamId;

@end

NS_ASSUME_NONNULL_END
