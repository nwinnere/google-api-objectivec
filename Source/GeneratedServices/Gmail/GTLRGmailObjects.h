// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Gmail API (gmail/v1)
// Description:
//   Access Gmail mailboxes including sending user email.
// Documentation:
//   https://developers.google.com/gmail/api/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRGmail_Draft;
@class GTLRGmail_History;
@class GTLRGmail_HistoryLabelAdded;
@class GTLRGmail_HistoryLabelRemoved;
@class GTLRGmail_HistoryMessageAdded;
@class GTLRGmail_HistoryMessageDeleted;
@class GTLRGmail_Label;
@class GTLRGmail_Message;
@class GTLRGmail_MessagePart;
@class GTLRGmail_MessagePartBody;
@class GTLRGmail_MessagePartHeader;
@class GTLRGmail_Thread;

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRGmail_Label.labelListVisibility

/** Value: "labelHide" */
GTLR_EXTERN NSString * const kGTLRGmail_Label_LabelListVisibility_LabelHide;
/** Value: "labelShow" */
GTLR_EXTERN NSString * const kGTLRGmail_Label_LabelListVisibility_LabelShow;
/** Value: "labelShowIfUnread" */
GTLR_EXTERN NSString * const kGTLRGmail_Label_LabelListVisibility_LabelShowIfUnread;

// ----------------------------------------------------------------------------
// GTLRGmail_Label.messageListVisibility

/** Value: "hide" */
GTLR_EXTERN NSString * const kGTLRGmail_Label_MessageListVisibility_Hide;
/** Value: "show" */
GTLR_EXTERN NSString * const kGTLRGmail_Label_MessageListVisibility_Show;

// ----------------------------------------------------------------------------
// GTLRGmail_Label.type

/** Value: "system" */
GTLR_EXTERN NSString * const kGTLRGmail_Label_Type_System;
/** Value: "user" */
GTLR_EXTERN NSString * const kGTLRGmail_Label_Type_User;

// ----------------------------------------------------------------------------
// GTLRGmail_WatchRequest.labelFilterAction

/** Value: "exclude" */
GTLR_EXTERN NSString * const kGTLRGmail_WatchRequest_LabelFilterAction_Exclude;
/** Value: "include" */
GTLR_EXTERN NSString * const kGTLRGmail_WatchRequest_LabelFilterAction_Include;

/**
 *  GTLRGmail_BatchDeleteMessagesRequest
 */
@interface GTLRGmail_BatchDeleteMessagesRequest : GTLRObject

/** The IDs of the messages to delete. */
@property(strong, nullable) NSArray<NSString *> *ids;

@end


/**
 *  A draft email in the user's mailbox.
 */
@interface GTLRGmail_Draft : GTLRObject

/**
 *  The immutable ID of the draft.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(copy, nullable) NSString *identifier;

/** The message content of the draft. */
@property(strong, nullable) GTLRGmail_Message *message;

@end


/**
 *  A record of a change to the user's mailbox. Each history change may affect
 *  multiple messages in multiple ways.
 */
@interface GTLRGmail_History : GTLRObject

/**
 *  The mailbox sequence ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(strong, nullable) NSNumber *identifier;

/** Labels added to messages in this history record. */
@property(strong, nullable) NSArray<GTLRGmail_HistoryLabelAdded *> *labelsAdded;

/** Labels removed from messages in this history record. */
@property(strong, nullable) NSArray<GTLRGmail_HistoryLabelRemoved *> *labelsRemoved;

/**
 *  List of messages changed in this history record. The fields for specific
 *  change types, such as messagesAdded may duplicate messages in this field. We
 *  recommend using the specific change-type fields instead of this.
 */
@property(strong, nullable) NSArray<GTLRGmail_Message *> *messages;

/** Messages added to the mailbox in this history record. */
@property(strong, nullable) NSArray<GTLRGmail_HistoryMessageAdded *> *messagesAdded;

/** Messages deleted (not Trashed) from the mailbox in this history record. */
@property(strong, nullable) NSArray<GTLRGmail_HistoryMessageDeleted *> *messagesDeleted;

@end


/**
 *  GTLRGmail_HistoryLabelAdded
 */
@interface GTLRGmail_HistoryLabelAdded : GTLRObject

/** Label IDs added to the message. */
@property(strong, nullable) NSArray<NSString *> *labelIds;

@property(strong, nullable) GTLRGmail_Message *message;

@end


/**
 *  GTLRGmail_HistoryLabelRemoved
 */
@interface GTLRGmail_HistoryLabelRemoved : GTLRObject

/** Label IDs removed from the message. */
@property(strong, nullable) NSArray<NSString *> *labelIds;

@property(strong, nullable) GTLRGmail_Message *message;

@end


/**
 *  GTLRGmail_HistoryMessageAdded
 */
@interface GTLRGmail_HistoryMessageAdded : GTLRObject

@property(strong, nullable) GTLRGmail_Message *message;

@end


/**
 *  GTLRGmail_HistoryMessageDeleted
 */
@interface GTLRGmail_HistoryMessageDeleted : GTLRObject

@property(strong, nullable) GTLRGmail_Message *message;

@end


/**
 *  Labels are used to categorize messages and threads within the user's
 *  mailbox.
 */
@interface GTLRGmail_Label : GTLRObject

/**
 *  The immutable ID of the label.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(copy, nullable) NSString *identifier;

/**
 *  The visibility of the label in the label list in the Gmail web interface.
 *
 *  Likely values:
 *    @arg @c kGTLRGmail_Label_LabelListVisibility_LabelHide Value "labelHide"
 *    @arg @c kGTLRGmail_Label_LabelListVisibility_LabelShow Value "labelShow"
 *    @arg @c kGTLRGmail_Label_LabelListVisibility_LabelShowIfUnread Value
 *        "labelShowIfUnread"
 */
@property(copy, nullable) NSString *labelListVisibility;

/**
 *  The visibility of the label in the message list in the Gmail web interface.
 *
 *  Likely values:
 *    @arg @c kGTLRGmail_Label_MessageListVisibility_Hide Value "hide"
 *    @arg @c kGTLRGmail_Label_MessageListVisibility_Show Value "show"
 */
@property(copy, nullable) NSString *messageListVisibility;

/**
 *  The total number of messages with the label.
 *
 *  Uses NSNumber of intValue.
 */
@property(strong, nullable) NSNumber *messagesTotal;

/**
 *  The number of unread messages with the label.
 *
 *  Uses NSNumber of intValue.
 */
@property(strong, nullable) NSNumber *messagesUnread;

/** The display name of the label. */
@property(copy, nullable) NSString *name;

/**
 *  The total number of threads with the label.
 *
 *  Uses NSNumber of intValue.
 */
@property(strong, nullable) NSNumber *threadsTotal;

/**
 *  The number of unread threads with the label.
 *
 *  Uses NSNumber of intValue.
 */
@property(strong, nullable) NSNumber *threadsUnread;

/**
 *  The owner type for the label. User labels are created by the user and can be
 *  modified and deleted by the user and can be applied to any message or
 *  thread. System labels are internally created and cannot be added, modified,
 *  or deleted. System labels may be able to be applied to or removed from
 *  messages and threads under some circumstances but this is not guaranteed.
 *  For example, users can apply and remove the INBOX and UNREAD labels from
 *  messages and threads, but cannot apply or remove the DRAFTS or SENT labels
 *  from messages or threads.
 *
 *  Likely values:
 *    @arg @c kGTLRGmail_Label_Type_System Value "system"
 *    @arg @c kGTLRGmail_Label_Type_User Value "user"
 */
@property(copy, nullable) NSString *type;

@end


/**
 *  GTLRGmail_ListDraftsResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "drafts" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRGmail_ListDraftsResponse : GTLRCollectionObject

/**
 *  List of drafts.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(strong, nullable) NSArray<GTLRGmail_Draft *> *drafts;

/** Token to retrieve the next page of results in the list. */
@property(copy, nullable) NSString *nextPageToken;

/**
 *  Estimated total number of results.
 *
 *  Uses NSNumber of unsignedIntValue.
 */
@property(strong, nullable) NSNumber *resultSizeEstimate;

@end


/**
 *  GTLRGmail_ListHistoryResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "history" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRGmail_ListHistoryResponse : GTLRCollectionObject

/**
 *  List of history records. Any messages contained in the response will
 *  typically only have id and threadId fields populated.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(strong, nullable) NSArray<GTLRGmail_History *> *history;

/**
 *  The ID of the mailbox's current history record.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(strong, nullable) NSNumber *historyId;

/** Page token to retrieve the next page of results in the list. */
@property(copy, nullable) NSString *nextPageToken;

@end


/**
 *  GTLRGmail_ListLabelsResponse
 */
@interface GTLRGmail_ListLabelsResponse : GTLRObject

/** List of labels. */
@property(strong, nullable) NSArray<GTLRGmail_Label *> *labels;

@end


/**
 *  GTLRGmail_ListMessagesResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "messages" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRGmail_ListMessagesResponse : GTLRCollectionObject

/**
 *  List of messages.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(strong, nullable) NSArray<GTLRGmail_Message *> *messages;

/** Token to retrieve the next page of results in the list. */
@property(copy, nullable) NSString *nextPageToken;

/**
 *  Estimated total number of results.
 *
 *  Uses NSNumber of unsignedIntValue.
 */
@property(strong, nullable) NSNumber *resultSizeEstimate;

@end


/**
 *  GTLRGmail_ListThreadsResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "threads" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRGmail_ListThreadsResponse : GTLRCollectionObject

/** Page token to retrieve the next page of results in the list. */
@property(copy, nullable) NSString *nextPageToken;

/**
 *  Estimated total number of results.
 *
 *  Uses NSNumber of unsignedIntValue.
 */
@property(strong, nullable) NSNumber *resultSizeEstimate;

/**
 *  List of threads.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(strong, nullable) NSArray<GTLRGmail_Thread *> *threads;

@end


/**
 *  An email message.
 */
@interface GTLRGmail_Message : GTLRObject

/**
 *  The ID of the last history record that modified this message.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(strong, nullable) NSNumber *historyId;

/**
 *  The immutable ID of the message.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(copy, nullable) NSString *identifier;

/**
 *  The internal message creation timestamp (epoch ms), which determines
 *  ordering in the inbox. For normal SMTP-received email, this represents the
 *  time the message was originally accepted by Google, which is more reliable
 *  than the Date header. However, for API-migrated mail, it can be configured
 *  by client to be based on the Date header.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(strong, nullable) NSNumber *internalDate;

/** List of IDs of labels applied to this message. */
@property(strong, nullable) NSArray<NSString *> *labelIds;

/** The parsed email structure in the message parts. */
@property(strong, nullable) GTLRGmail_MessagePart *payload;

/**
 *  The entire email message in an RFC 2822 formatted and base64url encoded
 *  string. Returned in messages.get and drafts.get responses when the
 *  format=RAW parameter is supplied.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(copy, nullable) NSString *raw;

/**
 *  Estimated size in bytes of the message.
 *
 *  Uses NSNumber of intValue.
 */
@property(strong, nullable) NSNumber *sizeEstimate;

/** A short part of the message text. */
@property(copy, nullable) NSString *snippet;

/**
 *  The ID of the thread the message belongs to. To add a message or draft to a
 *  thread, the following criteria must be met:
 *  - The requested threadId must be specified on the Message or Draft.Message
 *  you supply with your request.
 *  - The References and In-Reply-To headers must be set in compliance with the
 *  RFC 2822 standard.
 *  - The Subject headers must match.
 */
@property(copy, nullable) NSString *threadId;

@end


/**
 *  A single MIME message part.
 */
@interface GTLRGmail_MessagePart : GTLRObject

/**
 *  The message part body for this part, which may be empty for container MIME
 *  message parts.
 */
@property(strong, nullable) GTLRGmail_MessagePartBody *body;

/**
 *  The filename of the attachment. Only present if this message part represents
 *  an attachment.
 */
@property(copy, nullable) NSString *filename;

/**
 *  List of headers on this message part. For the top-level message part,
 *  representing the entire message payload, it will contain the standard RFC
 *  2822 email headers such as To, From, and Subject.
 */
@property(strong, nullable) NSArray<GTLRGmail_MessagePartHeader *> *headers;

/** The MIME type of the message part. */
@property(copy, nullable) NSString *mimeType;

/** The immutable ID of the message part. */
@property(copy, nullable) NSString *partId;

/**
 *  The child MIME message parts of this part. This only applies to container
 *  MIME message parts, for example multipart/ *. For non- container MIME
 *  message part types, such as text/plain, this field is empty. For more
 *  information, see RFC 1521.
 */
@property(strong, nullable) NSArray<GTLRGmail_MessagePart *> *parts;

@end


/**
 *  The body of a single MIME message part.
 */
@interface GTLRGmail_MessagePartBody : GTLRObject

/**
 *  When present, contains the ID of an external attachment that can be
 *  retrieved in a separate messages.attachments.get request. When not present,
 *  the entire content of the message part body is contained in the data field.
 */
@property(copy, nullable) NSString *attachmentId;

/**
 *  The body data of a MIME message part. May be empty for MIME container types
 *  that have no message body or when the body data is sent as a separate
 *  attachment. An attachment ID is present if the body data is contained in a
 *  separate attachment.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(copy, nullable) NSString *data;

/**
 *  Total number of bytes in the body of the message part.
 *
 *  Uses NSNumber of intValue.
 */
@property(strong, nullable) NSNumber *size;

@end


/**
 *  GTLRGmail_MessagePartHeader
 */
@interface GTLRGmail_MessagePartHeader : GTLRObject

/** The name of the header before the : separator. For example, To. */
@property(copy, nullable) NSString *name;

/**
 *  The value of the header after the : separator. For example,
 *  someuser\@example.com.
 */
@property(copy, nullable) NSString *value;

@end


/**
 *  GTLRGmail_ModifyMessageRequest
 */
@interface GTLRGmail_ModifyMessageRequest : GTLRObject

/** A list of IDs of labels to add to this message. */
@property(strong, nullable) NSArray<NSString *> *addLabelIds;

/** A list IDs of labels to remove from this message. */
@property(strong, nullable) NSArray<NSString *> *removeLabelIds;

@end


/**
 *  GTLRGmail_ModifyThreadRequest
 */
@interface GTLRGmail_ModifyThreadRequest : GTLRObject

/** A list of IDs of labels to add to this thread. */
@property(strong, nullable) NSArray<NSString *> *addLabelIds;

/** A list of IDs of labels to remove from this thread. */
@property(strong, nullable) NSArray<NSString *> *removeLabelIds;

@end


/**
 *  Profile for a Gmail user.
 */
@interface GTLRGmail_Profile : GTLRObject

/** The user's email address. */
@property(copy, nullable) NSString *emailAddress;

/**
 *  The ID of the mailbox's current history record.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(strong, nullable) NSNumber *historyId;

/**
 *  The total number of messages in the mailbox.
 *
 *  Uses NSNumber of intValue.
 */
@property(strong, nullable) NSNumber *messagesTotal;

/**
 *  The total number of threads in the mailbox.
 *
 *  Uses NSNumber of intValue.
 */
@property(strong, nullable) NSNumber *threadsTotal;

@end


/**
 *  A collection of messages representing a conversation.
 */
@interface GTLRGmail_Thread : GTLRObject

/**
 *  The ID of the last history record that modified this thread.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(strong, nullable) NSNumber *historyId;

/**
 *  The unique ID of the thread.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(copy, nullable) NSString *identifier;

/** The list of messages in the thread. */
@property(strong, nullable) NSArray<GTLRGmail_Message *> *messages;

/** A short part of the message text. */
@property(copy, nullable) NSString *snippet;

@end


/**
 *  Set up or update a new push notification watch on this user's mailbox.
 */
@interface GTLRGmail_WatchRequest : GTLRObject

/**
 *  Filtering behavior of labelIds list specified.
 *
 *  Likely values:
 *    @arg @c kGTLRGmail_WatchRequest_LabelFilterAction_Exclude Value "exclude"
 *    @arg @c kGTLRGmail_WatchRequest_LabelFilterAction_Include Value "include"
 */
@property(copy, nullable) NSString *labelFilterAction;

/**
 *  List of label_ids to restrict notifications about. By default, if
 *  unspecified, all changes are pushed out. If specified then dictates which
 *  labels are required for a push notification to be generated.
 */
@property(strong, nullable) NSArray<NSString *> *labelIds;

/**
 *  A fully qualified Google Cloud Pub/Sub API topic name to publish the events
 *  to. This topic name **must** already exist in Cloud Pub/Sub and you **must**
 *  have already granted gmail "publish" permission on it. For example,
 *  "projects/my-project-identifier/topics/my-topic-name" (using the Cloud
 *  Pub/Sub "v1" topic naming format).
 *  Note that the "my-project-identifier" portion must exactly match your Google
 *  developer project id (the one executing this watch request).
 */
@property(copy, nullable) NSString *topicName;

@end


/**
 *  Push notification watch response.
 */
@interface GTLRGmail_WatchResponse : GTLRObject

/**
 *  When Gmail will stop sending notifications for mailbox updates (epoch
 *  millis). Call watch again before this time to renew the watch.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(strong, nullable) NSNumber *expiration;

/**
 *  The ID of the mailbox's current history record.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(strong, nullable) NSNumber *historyId;

@end

NS_ASSUME_NONNULL_END
