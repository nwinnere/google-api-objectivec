// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Gmail API (gmail/v1)
// Description:
//   Access Gmail mailboxes including sending user email.
// Documentation:
//   https://developers.google.com/gmail/api/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRGmail_BatchDeleteMessagesRequest;
@class GTLRGmail_Draft;
@class GTLRGmail_Label;
@class GTLRGmail_Message;
@class GTLRGmail_ModifyMessageRequest;
@class GTLRGmail_ModifyThreadRequest;
@class GTLRGmail_WatchRequest;

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// format

/** Value: "full" */
GTLR_EXTERN NSString * const kGTLRGmailFormatFull;
/** Value: "metadata" */
GTLR_EXTERN NSString * const kGTLRGmailFormatMetadata;
/** Value: "minimal" */
GTLR_EXTERN NSString * const kGTLRGmailFormatMinimal;
/** Value: "raw" */
GTLR_EXTERN NSString * const kGTLRGmailFormatRaw;

// ----------------------------------------------------------------------------
// internalDateSource

/** Value: "dateHeader" */
GTLR_EXTERN NSString * const kGTLRGmailInternalDateSourceDateHeader;
/** Value: "receivedTime" */
GTLR_EXTERN NSString * const kGTLRGmailInternalDateSourceReceivedTime;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other Gmail query classes.
 */
@interface GTLRGmailQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(copy, nullable) NSString *fields;

@end

/**
 *  Creates a new draft with the DRAFT label.
 *
 *  Method: gmail.users.drafts.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailCompose
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 */
@interface GTLRGmailQuery_UsersDraftsCreate : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersDraftsCreateWithObject:userId:]

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_Draft.
 *
 *  Creates a new draft with the DRAFT label.
 *
 *  @param object The @c GTLRGmail_Draft to include in the query.
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *  @param uploadParameters The media to include in this query. Maximum size
 *    35MB. Accepted MIME type: message/rfc822
 *
 *  @returns GTLRGmailQuery_UsersDraftsCreate
 */
+ (instancetype)queryWithObject:(GTLRGmail_Draft *)object
                         userId:(NSString *)userId
               uploadParameters:(nullable GTLRUploadParameters *)uploadParameters;

@end

/**
 *  Immediately and permanently deletes the specified draft. Does not simply
 *  trash it.
 *
 *  Method: gmail.users.drafts.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailCompose
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 */
@interface GTLRGmailQuery_UsersDraftsDelete : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersDraftsDeleteWithuserId:identifier:]

/**
 *  The ID of the draft to delete.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(copy, nullable) NSString *identifier;

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(copy, nullable) NSString *userId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Immediately and permanently deletes the specified draft. Does not simply
 *  trash it.
 *
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *  @param identifier The ID of the draft to delete.
 *
 *  @returns GTLRGmailQuery_UsersDraftsDelete
 */
+ (instancetype)queryWithUserId:(NSString *)userId
                     identifier:(NSString *)identifier;

@end

/**
 *  Gets the specified draft.
 *
 *  Method: gmail.users.drafts.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailCompose
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 *    @c kGTLRAuthScopeGmailReadonly
 */
@interface GTLRGmailQuery_UsersDraftsGet : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersDraftsGetWithuserId:identifier:]

/**
 *  The format to return the draft in.
 *
 *  Likely values:
 *    @arg @c kGTLRGmailFormatFull Value "full"
 *    @arg @c kGTLRGmailFormatMetadata Value "metadata"
 *    @arg @c kGTLRGmailFormatMinimal Value "minimal"
 *    @arg @c kGTLRGmailFormatRaw Value "raw"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRGmailFormatFull.
 */
@property(copy, nullable) NSString *format;

/**
 *  The ID of the draft to retrieve.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(copy, nullable) NSString *identifier;

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_Draft.
 *
 *  Gets the specified draft.
 *
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *  @param identifier The ID of the draft to retrieve.
 *
 *  @returns GTLRGmailQuery_UsersDraftsGet
 */
+ (instancetype)queryWithUserId:(NSString *)userId
                     identifier:(NSString *)identifier;

@end

/**
 *  Lists the drafts in the user's mailbox.
 *
 *  Method: gmail.users.drafts.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailCompose
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 *    @c kGTLRAuthScopeGmailReadonly
 */
@interface GTLRGmailQuery_UsersDraftsList : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersDraftsListWithuserId:]

/**
 *  Include drafts from SPAM and TRASH in the results.
 *
 *  @note If not set, the documented server-side default will be false.
 */
@property(assign) BOOL includeSpamTrash;

/**
 *  Maximum number of drafts to return.
 *
 *  @note If not set, the documented server-side default will be 100.
 */
@property(assign) NSUInteger maxResults;

/** Page token to retrieve a specific page of results in the list. */
@property(copy, nullable) NSString *pageToken;

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_ListDraftsResponse.
 *
 *  Lists the drafts in the user's mailbox.
 *
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *
 *  @returns GTLRGmailQuery_UsersDraftsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithUserId:(NSString *)userId;

@end

/**
 *  Sends the specified, existing draft to the recipients in the To, Cc, and Bcc
 *  headers.
 *
 *  Method: gmail.users.drafts.send
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailCompose
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 */
@interface GTLRGmailQuery_UsersDraftsSend : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersDraftsSendWithObject:userId:]

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_Message.
 *
 *  Sends the specified, existing draft to the recipients in the To, Cc, and Bcc
 *  headers.
 *
 *  @param object The @c GTLRGmail_Draft to include in the query.
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *  @param uploadParameters The media to include in this query. Maximum size
 *    35MB. Accepted MIME type: message/rfc822
 *
 *  @returns GTLRGmailQuery_UsersDraftsSend
 */
+ (instancetype)queryWithObject:(GTLRGmail_Draft *)object
                         userId:(NSString *)userId
               uploadParameters:(nullable GTLRUploadParameters *)uploadParameters;

@end

/**
 *  Replaces a draft's content.
 *
 *  Method: gmail.users.drafts.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailCompose
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 */
@interface GTLRGmailQuery_UsersDraftsUpdate : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersDraftsUpdateWithObject:userId:identifier:]

/**
 *  The ID of the draft to update.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(copy, nullable) NSString *identifier;

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_Draft.
 *
 *  Replaces a draft's content.
 *
 *  @param object The @c GTLRGmail_Draft to include in the query.
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *  @param identifier The ID of the draft to update.
 *  @param uploadParameters The media to include in this query. Maximum size
 *    35MB. Accepted MIME type: message/rfc822
 *
 *  @returns GTLRGmailQuery_UsersDraftsUpdate
 */
+ (instancetype)queryWithObject:(GTLRGmail_Draft *)object
                         userId:(NSString *)userId
                     identifier:(NSString *)identifier
               uploadParameters:(nullable GTLRUploadParameters *)uploadParameters;

@end

/**
 *  Gets the current user's Gmail profile.
 *
 *  Method: gmail.users.getProfile
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailCompose
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 *    @c kGTLRAuthScopeGmailReadonly
 */
@interface GTLRGmailQuery_UsersGetProfile : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersGetProfileWithuserId:]

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_Profile.
 *
 *  Gets the current user's Gmail profile.
 *
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *
 *  @returns GTLRGmailQuery_UsersGetProfile
 */
+ (instancetype)queryWithUserId:(NSString *)userId;

@end

/**
 *  Lists the history of all changes to the given mailbox. History results are
 *  returned in chronological order (increasing historyId).
 *
 *  Method: gmail.users.history.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 *    @c kGTLRAuthScopeGmailReadonly
 */
@interface GTLRGmailQuery_UsersHistoryList : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersHistoryListWithuserId:]

/** Only return messages with a label matching the ID. */
@property(copy, nullable) NSString *labelId;

/**
 *  The maximum number of history records to return.
 *
 *  @note If not set, the documented server-side default will be 100.
 */
@property(assign) NSUInteger maxResults;

/** Page token to retrieve a specific page of results in the list. */
@property(copy, nullable) NSString *pageToken;

/**
 *  Required. Returns history records after the specified startHistoryId. The
 *  supplied startHistoryId should be obtained from the historyId of a message,
 *  thread, or previous list response. History IDs increase chronologically but
 *  are not contiguous with random gaps in between valid IDs. Supplying an
 *  invalid or out of date startHistoryId typically returns an HTTP 404 error
 *  code. A historyId is typically valid for at least a week, but in some rare
 *  circumstances may be valid for only a few hours. If you receive an HTTP 404
 *  error response, your application should perform a full sync. If you receive
 *  no nextPageToken in the response, there are no updates to retrieve and you
 *  can store the returned historyId for a future request.
 */
@property(assign) unsigned long long startHistoryId;

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_ListHistoryResponse.
 *
 *  Lists the history of all changes to the given mailbox. History results are
 *  returned in chronological order (increasing historyId).
 *
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *
 *  @returns GTLRGmailQuery_UsersHistoryList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithUserId:(NSString *)userId;

@end

/**
 *  Creates a new label.
 *
 *  Method: gmail.users.labels.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailLabels
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 */
@interface GTLRGmailQuery_UsersLabelsCreate : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersLabelsCreateWithObject:userId:]

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_Label.
 *
 *  Creates a new label.
 *
 *  @param object The @c GTLRGmail_Label to include in the query.
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *
 *  @returns GTLRGmailQuery_UsersLabelsCreate
 */
+ (instancetype)queryWithObject:(GTLRGmail_Label *)object
                         userId:(NSString *)userId;

@end

/**
 *  Immediately and permanently deletes the specified label and removes it from
 *  any messages and threads that it is applied to.
 *
 *  Method: gmail.users.labels.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailLabels
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 */
@interface GTLRGmailQuery_UsersLabelsDelete : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersLabelsDeleteWithuserId:identifier:]

/**
 *  The ID of the label to delete.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(copy, nullable) NSString *identifier;

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(copy, nullable) NSString *userId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Immediately and permanently deletes the specified label and removes it from
 *  any messages and threads that it is applied to.
 *
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *  @param identifier The ID of the label to delete.
 *
 *  @returns GTLRGmailQuery_UsersLabelsDelete
 */
+ (instancetype)queryWithUserId:(NSString *)userId
                     identifier:(NSString *)identifier;

@end

/**
 *  Gets the specified label.
 *
 *  Method: gmail.users.labels.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailLabels
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 *    @c kGTLRAuthScopeGmailReadonly
 */
@interface GTLRGmailQuery_UsersLabelsGet : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersLabelsGetWithuserId:identifier:]

/**
 *  The ID of the label to retrieve.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(copy, nullable) NSString *identifier;

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_Label.
 *
 *  Gets the specified label.
 *
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *  @param identifier The ID of the label to retrieve.
 *
 *  @returns GTLRGmailQuery_UsersLabelsGet
 */
+ (instancetype)queryWithUserId:(NSString *)userId
                     identifier:(NSString *)identifier;

@end

/**
 *  Lists all labels in the user's mailbox.
 *
 *  Method: gmail.users.labels.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailLabels
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 *    @c kGTLRAuthScopeGmailReadonly
 */
@interface GTLRGmailQuery_UsersLabelsList : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersLabelsListWithuserId:]

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_ListLabelsResponse.
 *
 *  Lists all labels in the user's mailbox.
 *
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *
 *  @returns GTLRGmailQuery_UsersLabelsList
 */
+ (instancetype)queryWithUserId:(NSString *)userId;

@end

/**
 *  Updates the specified label. This method supports patch semantics.
 *
 *  Method: gmail.users.labels.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailLabels
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 */
@interface GTLRGmailQuery_UsersLabelsPatch : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersLabelsPatchWithObject:userId:identifier:]

/**
 *  The ID of the label to update.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(copy, nullable) NSString *identifier;

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_Label.
 *
 *  Updates the specified label. This method supports patch semantics.
 *
 *  @param object The @c GTLRGmail_Label to include in the query.
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *  @param identifier The ID of the label to update.
 *
 *  @returns GTLRGmailQuery_UsersLabelsPatch
 */
+ (instancetype)queryWithObject:(GTLRGmail_Label *)object
                         userId:(NSString *)userId
                     identifier:(NSString *)identifier;

@end

/**
 *  Updates the specified label.
 *
 *  Method: gmail.users.labels.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailLabels
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 */
@interface GTLRGmailQuery_UsersLabelsUpdate : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersLabelsUpdateWithObject:userId:identifier:]

/**
 *  The ID of the label to update.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(copy, nullable) NSString *identifier;

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_Label.
 *
 *  Updates the specified label.
 *
 *  @param object The @c GTLRGmail_Label to include in the query.
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *  @param identifier The ID of the label to update.
 *
 *  @returns GTLRGmailQuery_UsersLabelsUpdate
 */
+ (instancetype)queryWithObject:(GTLRGmail_Label *)object
                         userId:(NSString *)userId
                     identifier:(NSString *)identifier;

@end

/**
 *  Gets the specified message attachment.
 *
 *  Method: gmail.users.messages.attachments.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 *    @c kGTLRAuthScopeGmailReadonly
 */
@interface GTLRGmailQuery_UsersMessagesAttachmentsGet : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersMessagesAttachmentsGetWithuserId:messageId:identifier:]

/**
 *  The ID of the attachment.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(copy, nullable) NSString *identifier;

/** The ID of the message containing the attachment. */
@property(copy, nullable) NSString *messageId;

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_MessagePartBody.
 *
 *  Gets the specified message attachment.
 *
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *  @param messageId The ID of the message containing the attachment.
 *  @param identifier The ID of the attachment.
 *
 *  @returns GTLRGmailQuery_UsersMessagesAttachmentsGet
 */
+ (instancetype)queryWithUserId:(NSString *)userId
                      messageId:(NSString *)messageId
                     identifier:(NSString *)identifier;

@end

/**
 *  Deletes many messages by message ID. Provides no guarantees that messages
 *  were not already deleted or even existed at all.
 *
 *  Method: gmail.users.messages.batchDelete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 */
@interface GTLRGmailQuery_UsersMessagesBatchDelete : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersMessagesBatchDeleteWithObject:userId:]

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(copy, nullable) NSString *userId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes many messages by message ID. Provides no guarantees that messages
 *  were not already deleted or even existed at all.
 *
 *  @param object The @c GTLRGmail_BatchDeleteMessagesRequest to include in the
 *    query.
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *
 *  @returns GTLRGmailQuery_UsersMessagesBatchDelete
 */
+ (instancetype)queryWithObject:(GTLRGmail_BatchDeleteMessagesRequest *)object
                         userId:(NSString *)userId;

@end

/**
 *  Immediately and permanently deletes the specified message. This operation
 *  cannot be undone. Prefer messages.trash instead.
 *
 *  Method: gmail.users.messages.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 */
@interface GTLRGmailQuery_UsersMessagesDelete : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersMessagesDeleteWithuserId:identifier:]

/**
 *  The ID of the message to delete.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(copy, nullable) NSString *identifier;

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(copy, nullable) NSString *userId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Immediately and permanently deletes the specified message. This operation
 *  cannot be undone. Prefer messages.trash instead.
 *
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *  @param identifier The ID of the message to delete.
 *
 *  @returns GTLRGmailQuery_UsersMessagesDelete
 */
+ (instancetype)queryWithUserId:(NSString *)userId
                     identifier:(NSString *)identifier;

@end

/**
 *  Gets the specified message.
 *
 *  Method: gmail.users.messages.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 *    @c kGTLRAuthScopeGmailReadonly
 */
@interface GTLRGmailQuery_UsersMessagesGet : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersMessagesGetWithuserId:identifier:]

/**
 *  The format to return the message in.
 *
 *  Likely values:
 *    @arg @c kGTLRGmailFormatFull Value "full"
 *    @arg @c kGTLRGmailFormatMetadata Value "metadata"
 *    @arg @c kGTLRGmailFormatMinimal Value "minimal"
 *    @arg @c kGTLRGmailFormatRaw Value "raw"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRGmailFormatFull.
 */
@property(copy, nullable) NSString *format;

/**
 *  The ID of the message to retrieve.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(copy, nullable) NSString *identifier;

/** When given and format is METADATA, only include headers specified. */
@property(strong, nullable) NSArray<NSString *> *metadataHeaders;

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_Message.
 *
 *  Gets the specified message.
 *
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *  @param identifier The ID of the message to retrieve.
 *
 *  @returns GTLRGmailQuery_UsersMessagesGet
 */
+ (instancetype)queryWithUserId:(NSString *)userId
                     identifier:(NSString *)identifier;

@end

/**
 *  Imports a message into only this user's mailbox, with standard email
 *  delivery scanning and classification similar to receiving via SMTP. Does not
 *  send a message.
 *
 *  Method: gmail.users.messages.import
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailInsert
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 */
@interface GTLRGmailQuery_UsersMessagesImport : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersMessagesImportWithObject:userId:]

/**
 *  Mark the email as permanently deleted (not TRASH) and only visible in Google
 *  Apps Vault to a Vault administrator. Only used for Google Apps for Work
 *  accounts.
 *
 *  @note If not set, the documented server-side default will be false.
 */
@property(assign) BOOL deleted;

/**
 *  Source for Gmail's internal date of the message.
 *
 *  Likely values:
 *    @arg @c kGTLRGmailInternalDateSourceDateHeader Value "dateHeader"
 *    @arg @c kGTLRGmailInternalDateSourceReceivedTime Value "receivedTime"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRGmailInternalDateSourceDateHeader.
 */
@property(copy, nullable) NSString *internalDateSource;

/**
 *  Ignore the Gmail spam classifier decision and never mark this email as SPAM
 *  in the mailbox.
 *
 *  @note If not set, the documented server-side default will be false.
 */
@property(assign) BOOL neverMarkSpam;

/**
 *  Process calendar invites in the email and add any extracted meetings to the
 *  Google Calendar for this user.
 *
 *  @note If not set, the documented server-side default will be false.
 */
@property(assign) BOOL processForCalendar;

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_Message.
 *
 *  Imports a message into only this user's mailbox, with standard email
 *  delivery scanning and classification similar to receiving via SMTP. Does not
 *  send a message.
 *
 *  @param object The @c GTLRGmail_Message to include in the query.
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *  @param uploadParameters The media to include in this query. Maximum size
 *    35MB. Accepted MIME type: message/rfc822
 *
 *  @returns GTLRGmailQuery_UsersMessagesImport
 */
+ (instancetype)queryWithObject:(GTLRGmail_Message *)object
                         userId:(NSString *)userId
               uploadParameters:(nullable GTLRUploadParameters *)uploadParameters;

@end

/**
 *  Directly inserts a message into only this user's mailbox similar to IMAP
 *  APPEND, bypassing most scanning and classification. Does not send a message.
 *
 *  Method: gmail.users.messages.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailInsert
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 */
@interface GTLRGmailQuery_UsersMessagesInsert : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersMessagesInsertWithObject:userId:]

/**
 *  Mark the email as permanently deleted (not TRASH) and only visible in Google
 *  Apps Vault to a Vault administrator. Only used for Google Apps for Work
 *  accounts.
 *
 *  @note If not set, the documented server-side default will be false.
 */
@property(assign) BOOL deleted;

/**
 *  Source for Gmail's internal date of the message.
 *
 *  Likely values:
 *    @arg @c kGTLRGmailInternalDateSourceDateHeader Value "dateHeader"
 *    @arg @c kGTLRGmailInternalDateSourceReceivedTime Value "receivedTime"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRGmailInternalDateSourceReceivedTime.
 */
@property(copy, nullable) NSString *internalDateSource;

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_Message.
 *
 *  Directly inserts a message into only this user's mailbox similar to IMAP
 *  APPEND, bypassing most scanning and classification. Does not send a message.
 *
 *  @param object The @c GTLRGmail_Message to include in the query.
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *  @param uploadParameters The media to include in this query. Maximum size
 *    35MB. Accepted MIME type: message/rfc822
 *
 *  @returns GTLRGmailQuery_UsersMessagesInsert
 */
+ (instancetype)queryWithObject:(GTLRGmail_Message *)object
                         userId:(NSString *)userId
               uploadParameters:(nullable GTLRUploadParameters *)uploadParameters;

@end

/**
 *  Lists the messages in the user's mailbox.
 *
 *  Method: gmail.users.messages.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 *    @c kGTLRAuthScopeGmailReadonly
 */
@interface GTLRGmailQuery_UsersMessagesList : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersMessagesListWithuserId:]

/**
 *  Include messages from SPAM and TRASH in the results.
 *
 *  @note If not set, the documented server-side default will be false.
 */
@property(assign) BOOL includeSpamTrash;

/**
 *  Only return messages with labels that match all of the specified label IDs.
 */
@property(strong, nullable) NSArray<NSString *> *labelIds;

/**
 *  Maximum number of messages to return.
 *
 *  @note If not set, the documented server-side default will be 100.
 */
@property(assign) NSUInteger maxResults;

/** Page token to retrieve a specific page of results in the list. */
@property(copy, nullable) NSString *pageToken;

/**
 *  Only return messages matching the specified query. Supports the same query
 *  format as the Gmail search box. For example, "from:someuser\@example.com
 *  rfc822msgid: is:unread".
 */
@property(copy, nullable) NSString *q;

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_ListMessagesResponse.
 *
 *  Lists the messages in the user's mailbox.
 *
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *
 *  @returns GTLRGmailQuery_UsersMessagesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithUserId:(NSString *)userId;

@end

/**
 *  Modifies the labels on the specified message.
 *
 *  Method: gmail.users.messages.modify
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 */
@interface GTLRGmailQuery_UsersMessagesModify : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersMessagesModifyWithObject:userId:identifier:]

/**
 *  The ID of the message to modify.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(copy, nullable) NSString *identifier;

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_Message.
 *
 *  Modifies the labels on the specified message.
 *
 *  @param object The @c GTLRGmail_ModifyMessageRequest to include in the query.
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *  @param identifier The ID of the message to modify.
 *
 *  @returns GTLRGmailQuery_UsersMessagesModify
 */
+ (instancetype)queryWithObject:(GTLRGmail_ModifyMessageRequest *)object
                         userId:(NSString *)userId
                     identifier:(NSString *)identifier;

@end

/**
 *  Sends the specified message to the recipients in the To, Cc, and Bcc
 *  headers.
 *
 *  Method: gmail.users.messages.send
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailCompose
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 *    @c kGTLRAuthScopeGmailSend
 */
@interface GTLRGmailQuery_UsersMessagesSend : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersMessagesSendWithObject:userId:]

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_Message.
 *
 *  Sends the specified message to the recipients in the To, Cc, and Bcc
 *  headers.
 *
 *  @param object The @c GTLRGmail_Message to include in the query.
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *  @param uploadParameters The media to include in this query. Maximum size
 *    35MB. Accepted MIME type: message/rfc822
 *
 *  @returns GTLRGmailQuery_UsersMessagesSend
 */
+ (instancetype)queryWithObject:(GTLRGmail_Message *)object
                         userId:(NSString *)userId
               uploadParameters:(nullable GTLRUploadParameters *)uploadParameters;

@end

/**
 *  Moves the specified message to the trash.
 *
 *  Method: gmail.users.messages.trash
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 */
@interface GTLRGmailQuery_UsersMessagesTrash : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersMessagesTrashWithuserId:identifier:]

/**
 *  The ID of the message to Trash.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(copy, nullable) NSString *identifier;

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_Message.
 *
 *  Moves the specified message to the trash.
 *
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *  @param identifier The ID of the message to Trash.
 *
 *  @returns GTLRGmailQuery_UsersMessagesTrash
 */
+ (instancetype)queryWithUserId:(NSString *)userId
                     identifier:(NSString *)identifier;

@end

/**
 *  Removes the specified message from the trash.
 *
 *  Method: gmail.users.messages.untrash
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 */
@interface GTLRGmailQuery_UsersMessagesUntrash : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersMessagesUntrashWithuserId:identifier:]

/**
 *  The ID of the message to remove from Trash.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(copy, nullable) NSString *identifier;

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_Message.
 *
 *  Removes the specified message from the trash.
 *
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *  @param identifier The ID of the message to remove from Trash.
 *
 *  @returns GTLRGmailQuery_UsersMessagesUntrash
 */
+ (instancetype)queryWithUserId:(NSString *)userId
                     identifier:(NSString *)identifier;

@end

/**
 *  Stop receiving push notifications for the given user mailbox.
 *
 *  Method: gmail.users.stop
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 *    @c kGTLRAuthScopeGmailReadonly
 */
@interface GTLRGmailQuery_UsersStop : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersStopWithuserId:]

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(copy, nullable) NSString *userId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Stop receiving push notifications for the given user mailbox.
 *
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *
 *  @returns GTLRGmailQuery_UsersStop
 */
+ (instancetype)queryWithUserId:(NSString *)userId;

@end

/**
 *  Immediately and permanently deletes the specified thread. This operation
 *  cannot be undone. Prefer threads.trash instead.
 *
 *  Method: gmail.users.threads.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 */
@interface GTLRGmailQuery_UsersThreadsDelete : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersThreadsDeleteWithuserId:identifier:]

/**
 *  ID of the Thread to delete.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(copy, nullable) NSString *identifier;

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(copy, nullable) NSString *userId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Immediately and permanently deletes the specified thread. This operation
 *  cannot be undone. Prefer threads.trash instead.
 *
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *  @param identifier ID of the Thread to delete.
 *
 *  @returns GTLRGmailQuery_UsersThreadsDelete
 */
+ (instancetype)queryWithUserId:(NSString *)userId
                     identifier:(NSString *)identifier;

@end

/**
 *  Gets the specified thread.
 *
 *  Method: gmail.users.threads.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 *    @c kGTLRAuthScopeGmailReadonly
 */
@interface GTLRGmailQuery_UsersThreadsGet : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersThreadsGetWithuserId:identifier:]

/**
 *  The format to return the messages in.
 *
 *  Likely values:
 *    @arg @c kGTLRGmailFormatFull Value "full"
 *    @arg @c kGTLRGmailFormatMetadata Value "metadata"
 *    @arg @c kGTLRGmailFormatMinimal Value "minimal"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRGmailFormatFull.
 */
@property(copy, nullable) NSString *format;

/**
 *  The ID of the thread to retrieve.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(copy, nullable) NSString *identifier;

/** When given and format is METADATA, only include headers specified. */
@property(strong, nullable) NSArray<NSString *> *metadataHeaders;

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_Thread.
 *
 *  Gets the specified thread.
 *
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *  @param identifier The ID of the thread to retrieve.
 *
 *  @returns GTLRGmailQuery_UsersThreadsGet
 */
+ (instancetype)queryWithUserId:(NSString *)userId
                     identifier:(NSString *)identifier;

@end

/**
 *  Lists the threads in the user's mailbox.
 *
 *  Method: gmail.users.threads.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 *    @c kGTLRAuthScopeGmailReadonly
 */
@interface GTLRGmailQuery_UsersThreadsList : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersThreadsListWithuserId:]

/**
 *  Include threads from SPAM and TRASH in the results.
 *
 *  @note If not set, the documented server-side default will be false.
 */
@property(assign) BOOL includeSpamTrash;

/**
 *  Only return threads with labels that match all of the specified label IDs.
 */
@property(strong, nullable) NSArray<NSString *> *labelIds;

/**
 *  Maximum number of threads to return.
 *
 *  @note If not set, the documented server-side default will be 100.
 */
@property(assign) NSUInteger maxResults;

/** Page token to retrieve a specific page of results in the list. */
@property(copy, nullable) NSString *pageToken;

/**
 *  Only return threads matching the specified query. Supports the same query
 *  format as the Gmail search box. For example, "from:someuser\@example.com
 *  rfc822msgid: is:unread".
 */
@property(copy, nullable) NSString *q;

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_ListThreadsResponse.
 *
 *  Lists the threads in the user's mailbox.
 *
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *
 *  @returns GTLRGmailQuery_UsersThreadsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithUserId:(NSString *)userId;

@end

/**
 *  Modifies the labels applied to the thread. This applies to all messages in
 *  the thread.
 *
 *  Method: gmail.users.threads.modify
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 */
@interface GTLRGmailQuery_UsersThreadsModify : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersThreadsModifyWithObject:userId:identifier:]

/**
 *  The ID of the thread to modify.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(copy, nullable) NSString *identifier;

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_Thread.
 *
 *  Modifies the labels applied to the thread. This applies to all messages in
 *  the thread.
 *
 *  @param object The @c GTLRGmail_ModifyThreadRequest to include in the query.
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *  @param identifier The ID of the thread to modify.
 *
 *  @returns GTLRGmailQuery_UsersThreadsModify
 */
+ (instancetype)queryWithObject:(GTLRGmail_ModifyThreadRequest *)object
                         userId:(NSString *)userId
                     identifier:(NSString *)identifier;

@end

/**
 *  Moves the specified thread to the trash.
 *
 *  Method: gmail.users.threads.trash
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 */
@interface GTLRGmailQuery_UsersThreadsTrash : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersThreadsTrashWithuserId:identifier:]

/**
 *  The ID of the thread to Trash.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(copy, nullable) NSString *identifier;

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_Thread.
 *
 *  Moves the specified thread to the trash.
 *
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *  @param identifier The ID of the thread to Trash.
 *
 *  @returns GTLRGmailQuery_UsersThreadsTrash
 */
+ (instancetype)queryWithUserId:(NSString *)userId
                     identifier:(NSString *)identifier;

@end

/**
 *  Removes the specified thread from the trash.
 *
 *  Method: gmail.users.threads.untrash
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 */
@interface GTLRGmailQuery_UsersThreadsUntrash : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersThreadsUntrashWithuserId:identifier:]

/**
 *  The ID of the thread to remove from Trash.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(copy, nullable) NSString *identifier;

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_Thread.
 *
 *  Removes the specified thread from the trash.
 *
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *  @param identifier The ID of the thread to remove from Trash.
 *
 *  @returns GTLRGmailQuery_UsersThreadsUntrash
 */
+ (instancetype)queryWithUserId:(NSString *)userId
                     identifier:(NSString *)identifier;

@end

/**
 *  Set up or update a push notification watch on the given user mailbox.
 *
 *  Method: gmail.users.watch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 *    @c kGTLRAuthScopeGmailReadonly
 */
@interface GTLRGmailQuery_UsersWatch : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersWatchWithObject:userId:]

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_WatchResponse.
 *
 *  Set up or update a push notification watch on the given user mailbox.
 *
 *  @param object The @c GTLRGmail_WatchRequest to include in the query.
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *
 *  @returns GTLRGmailQuery_UsersWatch
 */
+ (instancetype)queryWithObject:(GTLRGmail_WatchRequest *)object
                         userId:(NSString *)userId;

@end

NS_ASSUME_NONNULL_END
