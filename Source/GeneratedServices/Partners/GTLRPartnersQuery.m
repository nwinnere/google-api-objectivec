// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Partners API (partners/v2)
// Description:
//   Lets advertisers search certified companies and create contact leads with
//   them, and also audits the usage of clients.
// Documentation:
//   https://developers.google.com/partners/

#import "GTLRPartnersQuery.h"

#import "GTLRPartnersObjects.h"

// ----------------------------------------------------------------------------
// Constants

// gpsMotivations
NSString * const kGTLRPartnersGpsMotivationsGpsmHelpWithAdvertising = @"GPSM_HELP_WITH_ADVERTISING";
NSString * const kGTLRPartnersGpsMotivationsGpsmHelpWithWebsite = @"GPSM_HELP_WITH_WEBSITE";
NSString * const kGTLRPartnersGpsMotivationsGpsmNoWebsite      = @"GPSM_NO_WEBSITE";
NSString * const kGTLRPartnersGpsMotivationsGpsMotivationUnspecified = @"GPS_MOTIVATION_UNSPECIFIED";

// industries
NSString * const kGTLRPartnersIndustriesIAutomotive            = @"I_AUTOMOTIVE";
NSString * const kGTLRPartnersIndustriesIBusinessToBusiness    = @"I_BUSINESS_TO_BUSINESS";
NSString * const kGTLRPartnersIndustriesIConsumerPackagedGoods = @"I_CONSUMER_PACKAGED_GOODS";
NSString * const kGTLRPartnersIndustriesIEducation             = @"I_EDUCATION";
NSString * const kGTLRPartnersIndustriesIFinance               = @"I_FINANCE";
NSString * const kGTLRPartnersIndustriesIHealthcare            = @"I_HEALTHCARE";
NSString * const kGTLRPartnersIndustriesIMediaAndEntertainment = @"I_MEDIA_AND_ENTERTAINMENT";
NSString * const kGTLRPartnersIndustriesIndustryUnspecified    = @"INDUSTRY_UNSPECIFIED";
NSString * const kGTLRPartnersIndustriesIRetail                = @"I_RETAIL";
NSString * const kGTLRPartnersIndustriesITechnology            = @"I_TECHNOLOGY";
NSString * const kGTLRPartnersIndustriesITravel                = @"I_TRAVEL";

// services
NSString * const kGTLRPartnersServicesSAdvancedAdwordsSupport = @"S_ADVANCED_ADWORDS_SUPPORT";
NSString * const kGTLRPartnersServicesSAdvertisingOnGoogle    = @"S_ADVERTISING_ON_GOOGLE";
NSString * const kGTLRPartnersServicesSAnEnhancedWebsite      = @"S_AN_ENHANCED_WEBSITE";
NSString * const kGTLRPartnersServicesSAnOnlineMarketingPlan  = @"S_AN_ONLINE_MARKETING_PLAN";
NSString * const kGTLRPartnersServicesServiceUnspecified      = @"SERVICE_UNSPECIFIED";
NSString * const kGTLRPartnersServicesSMobileAndVideoAds      = @"S_MOBILE_AND_VIDEO_ADS";

// view
NSString * const kGTLRPartnersViewCompanyViewUnspecified = @"COMPANY_VIEW_UNSPECIFIED";
NSString * const kGTLRPartnersViewCvGooglePartnerSearch  = @"CV_GOOGLE_PARTNER_SEARCH";

// ----------------------------------------------------------------------------
// Query Classes
//

@implementation GTLRPartnersQuery

@dynamic fields;

@end

@implementation GTLRPartnersQuery_ClientMessagesLog

+ (instancetype)queryWithObject:(GTLRPartners_LogMessageRequest *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"v2/clientMessages:log";
  GTLRPartnersQuery_ClientMessagesLog *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRPartners_LogMessageResponse class];
  query.loggingName = @"partners.clientMessages.log";
  return query;
}

@end

@implementation GTLRPartnersQuery_CompaniesGet

@dynamic address, companyId, currencyCode, orderBy,
         requestMetadataExperimentIds, requestMetadataLocale,
         requestMetadataPartnersSessionId,
         requestMetadataTrafficSourceTrafficSourceId,
         requestMetadataTrafficSourceTrafficSubId,
         requestMetadataUserOverridesIpAddress,
         requestMetadataUserOverridesUserId, view;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"requestMetadataExperimentIds" : @"requestMetadata.experimentIds",
    @"requestMetadataLocale" : @"requestMetadata.locale",
    @"requestMetadataPartnersSessionId" : @"requestMetadata.partnersSessionId",
    @"requestMetadataTrafficSourceTrafficSourceId" : @"requestMetadata.trafficSource.trafficSourceId",
    @"requestMetadataTrafficSourceTrafficSubId" : @"requestMetadata.trafficSource.trafficSubId",
    @"requestMetadataUserOverridesIpAddress" : @"requestMetadata.userOverrides.ipAddress",
    @"requestMetadataUserOverridesUserId" : @"requestMetadata.userOverrides.userId"
  };
  return map;
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"requestMetadata.experimentIds" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithCompanyId:(NSString *)companyId {
  NSArray *pathParams = @[ @"companyId" ];
  NSString *pathURITemplate = @"v2/companies/{companyId}";
  GTLRPartnersQuery_CompaniesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.companyId = companyId;
  query.expectedObjectClass = [GTLRPartners_GetCompanyResponse class];
  query.loggingName = @"partners.companies.get";
  return query;
}

@end

@implementation GTLRPartnersQuery_CompaniesLeadsCreate

@dynamic companyId;

+ (instancetype)queryWithObject:(GTLRPartners_CreateLeadRequest *)object
                      companyId:(NSString *)companyId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"companyId" ];
  NSString *pathURITemplate = @"v2/companies/{companyId}/leads";
  GTLRPartnersQuery_CompaniesLeadsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.companyId = companyId;
  query.expectedObjectClass = [GTLRPartners_CreateLeadResponse class];
  query.loggingName = @"partners.companies.leads.create";
  return query;
}

@end

@implementation GTLRPartnersQuery_CompaniesList

@dynamic address, companyName, gpsMotivations, industries, languageCodes,
         maxMonthlyBudgetCurrencyCode, maxMonthlyBudgetNanos,
         maxMonthlyBudgetUnits, minMonthlyBudgetCurrencyCode,
         minMonthlyBudgetNanos, minMonthlyBudgetUnits, orderBy, pageSize,
         pageToken, requestMetadataExperimentIds, requestMetadataLocale,
         requestMetadataPartnersSessionId,
         requestMetadataTrafficSourceTrafficSourceId,
         requestMetadataTrafficSourceTrafficSubId,
         requestMetadataUserOverridesIpAddress,
         requestMetadataUserOverridesUserId, services, view, websiteUrl;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"maxMonthlyBudgetCurrencyCode" : @"maxMonthlyBudget.currencyCode",
    @"maxMonthlyBudgetNanos" : @"maxMonthlyBudget.nanos",
    @"maxMonthlyBudgetUnits" : @"maxMonthlyBudget.units",
    @"minMonthlyBudgetCurrencyCode" : @"minMonthlyBudget.currencyCode",
    @"minMonthlyBudgetNanos" : @"minMonthlyBudget.nanos",
    @"minMonthlyBudgetUnits" : @"minMonthlyBudget.units",
    @"requestMetadataExperimentIds" : @"requestMetadata.experimentIds",
    @"requestMetadataLocale" : @"requestMetadata.locale",
    @"requestMetadataPartnersSessionId" : @"requestMetadata.partnersSessionId",
    @"requestMetadataTrafficSourceTrafficSourceId" : @"requestMetadata.trafficSource.trafficSourceId",
    @"requestMetadataTrafficSourceTrafficSubId" : @"requestMetadata.trafficSource.trafficSubId",
    @"requestMetadataUserOverridesIpAddress" : @"requestMetadata.userOverrides.ipAddress",
    @"requestMetadataUserOverridesUserId" : @"requestMetadata.userOverrides.userId"
  };
  return map;
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"gpsMotivations" : [NSString class],
    @"industries" : [NSString class],
    @"languageCodes" : [NSString class],
    @"requestMetadata.experimentIds" : [NSString class],
    @"services" : [NSString class]
  };
  return map;
}

+ (instancetype)query {
  NSString *pathURITemplate = @"v2/companies";
  GTLRPartnersQuery_CompaniesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRPartners_ListCompaniesResponse class];
  query.loggingName = @"partners.companies.list";
  return query;
}

@end

@implementation GTLRPartnersQuery_UserEventsLog

+ (instancetype)queryWithObject:(GTLRPartners_LogUserEventRequest *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"v2/userEvents:log";
  GTLRPartnersQuery_UserEventsLog *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRPartners_LogUserEventResponse class];
  query.loggingName = @"partners.userEvents.log";
  return query;
}

@end

@implementation GTLRPartnersQuery_UserStatesList

@dynamic requestMetadataExperimentIds, requestMetadataLocale,
         requestMetadataPartnersSessionId,
         requestMetadataTrafficSourceTrafficSourceId,
         requestMetadataTrafficSourceTrafficSubId,
         requestMetadataUserOverridesIpAddress,
         requestMetadataUserOverridesUserId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"requestMetadataExperimentIds" : @"requestMetadata.experimentIds",
    @"requestMetadataLocale" : @"requestMetadata.locale",
    @"requestMetadataPartnersSessionId" : @"requestMetadata.partnersSessionId",
    @"requestMetadataTrafficSourceTrafficSourceId" : @"requestMetadata.trafficSource.trafficSourceId",
    @"requestMetadataTrafficSourceTrafficSubId" : @"requestMetadata.trafficSource.trafficSubId",
    @"requestMetadataUserOverridesIpAddress" : @"requestMetadata.userOverrides.ipAddress",
    @"requestMetadataUserOverridesUserId" : @"requestMetadata.userOverrides.userId"
  };
  return map;
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"requestMetadata.experimentIds" : [NSString class]
  };
  return map;
}

+ (instancetype)query {
  NSString *pathURITemplate = @"v2/userStates";
  GTLRPartnersQuery_UserStatesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRPartners_ListUserStatesResponse class];
  query.loggingName = @"partners.userStates.list";
  return query;
}

@end
