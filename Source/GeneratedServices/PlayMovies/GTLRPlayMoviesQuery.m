// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Play Movies Partner API (playmoviespartner/v1)
// Description:
//   Gets the delivery status of titles for Google Play Movies Partners.
// Documentation:
//   https://developers.google.com/playmoviespartner/

#import "GTLRPlayMoviesQuery.h"

#import "GTLRPlayMoviesObjects.h"

// ----------------------------------------------------------------------------
// Constants

// status
NSString * const kGTLRPlayMoviesStatusStatusApproved     = @"STATUS_APPROVED";
NSString * const kGTLRPlayMoviesStatusStatusFailed       = @"STATUS_FAILED";
NSString * const kGTLRPlayMoviesStatusStatusNotAvailable = @"STATUS_NOT_AVAILABLE";
NSString * const kGTLRPlayMoviesStatusStatusProcessing   = @"STATUS_PROCESSING";
NSString * const kGTLRPlayMoviesStatusStatusUnfulfilled  = @"STATUS_UNFULFILLED";
NSString * const kGTLRPlayMoviesStatusStatusUnspecified  = @"STATUS_UNSPECIFIED";

// type
NSString * const kGTLRPlayMoviesTypeArtwork                  = @"ARTWORK";
NSString * const kGTLRPlayMoviesTypeAudio20                  = @"AUDIO_20";
NSString * const kGTLRPlayMoviesTypeAudio51                  = @"AUDIO_51";
NSString * const kGTLRPlayMoviesTypeComponentTypeUnspecified = @"COMPONENT_TYPE_UNSPECIFIED";
NSString * const kGTLRPlayMoviesTypeMetadata                 = @"METADATA";
NSString * const kGTLRPlayMoviesTypeSubtitle                 = @"SUBTITLE";
NSString * const kGTLRPlayMoviesTypeVideo                    = @"VIDEO";

// ----------------------------------------------------------------------------
// Query Classes
//

@implementation GTLRPlayMoviesQuery

@dynamic fields;

@end

@implementation GTLRPlayMoviesQuery_AccountsAvailsGet

@dynamic accountId, availId;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                           availId:(NSString *)availId {
  NSArray *pathParams = @[
    @"accountId", @"availId"
  ];
  NSString *pathURITemplate = @"v1/accounts/{accountId}/avails/{availId}";
  GTLRPlayMoviesQuery_AccountsAvailsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.availId = availId;
  query.expectedObjectClass = [GTLRPlayMovies_Avail class];
  query.loggingName = @"playmoviespartner.accounts.avails.get";
  return query;
}

@end

@implementation GTLRPlayMoviesQuery_AccountsAvailsList

@dynamic accountId, altId, altIds, pageSize, pageToken, pphNames, studioNames,
         territories, title, videoIds;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"altIds" : [NSString class],
    @"pphNames" : [NSString class],
    @"studioNames" : [NSString class],
    @"territories" : [NSString class],
    @"videoIds" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithAccountId:(NSString *)accountId {
  NSArray *pathParams = @[ @"accountId" ];
  NSString *pathURITemplate = @"v1/accounts/{accountId}/avails";
  GTLRPlayMoviesQuery_AccountsAvailsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.expectedObjectClass = [GTLRPlayMovies_ListAvailsResponse class];
  query.loggingName = @"playmoviespartner.accounts.avails.list";
  return query;
}

@end

@implementation GTLRPlayMoviesQuery_AccountsComponentsList

@dynamic accountId, altCutId, customId, editLevelEidr, elId, filename,
         inventoryId, pageSize, pageToken, playableSequenceId, pphNames,
         presentationId, status, studioNames, titleLevelEidr;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"pphNames" : [NSString class],
    @"status" : [NSString class],
    @"studioNames" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithAccountId:(NSString *)accountId {
  NSArray *pathParams = @[ @"accountId" ];
  NSString *pathURITemplate = @"v1/accounts/{accountId}/components";
  GTLRPlayMoviesQuery_AccountsComponentsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.expectedObjectClass = [GTLRPlayMovies_ListComponentsResponse class];
  query.loggingName = @"playmoviespartner.accounts.components.list";
  return query;
}

@end

@implementation GTLRPlayMoviesQuery_AccountsComponentsTypeGet

@dynamic accountId, componentId, type;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                       componentId:(NSString *)componentId
                              type:(NSString *)type {
  NSArray *pathParams = @[
    @"accountId", @"componentId", @"type"
  ];
  NSString *pathURITemplate = @"v1/accounts/{accountId}/components/{componentId}/type/{type}";
  GTLRPlayMoviesQuery_AccountsComponentsTypeGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.componentId = componentId;
  query.type = type;
  query.expectedObjectClass = [GTLRPlayMovies_Component class];
  query.loggingName = @"playmoviespartner.accounts.components.type.get";
  return query;
}

@end

@implementation GTLRPlayMoviesQuery_AccountsExperienceLocalesGet

@dynamic accountId, elId;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                              elId:(NSString *)elId {
  NSArray *pathParams = @[
    @"accountId", @"elId"
  ];
  NSString *pathURITemplate = @"v1/accounts/{accountId}/experienceLocales/{elId}";
  GTLRPlayMoviesQuery_AccountsExperienceLocalesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.elId = elId;
  query.expectedObjectClass = [GTLRPlayMovies_ExperienceLocale class];
  query.loggingName = @"playmoviespartner.accounts.experienceLocales.get";
  return query;
}

@end

@implementation GTLRPlayMoviesQuery_AccountsExperienceLocalesList

@dynamic accountId, altCutId, customId, editLevelEidr, pageSize, pageToken,
         pphNames, status, studioNames, titleLevelEidr;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"pphNames" : [NSString class],
    @"status" : [NSString class],
    @"studioNames" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithAccountId:(NSString *)accountId {
  NSArray *pathParams = @[ @"accountId" ];
  NSString *pathURITemplate = @"v1/accounts/{accountId}/experienceLocales";
  GTLRPlayMoviesQuery_AccountsExperienceLocalesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.expectedObjectClass = [GTLRPlayMovies_ListExperienceLocalesResponse class];
  query.loggingName = @"playmoviespartner.accounts.experienceLocales.list";
  return query;
}

@end

@implementation GTLRPlayMoviesQuery_AccountsOrdersGet

@dynamic accountId, orderId;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                           orderId:(NSString *)orderId {
  NSArray *pathParams = @[
    @"accountId", @"orderId"
  ];
  NSString *pathURITemplate = @"v1/accounts/{accountId}/orders/{orderId}";
  GTLRPlayMoviesQuery_AccountsOrdersGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.orderId = orderId;
  query.expectedObjectClass = [GTLRPlayMovies_Order class];
  query.loggingName = @"playmoviespartner.accounts.orders.get";
  return query;
}

@end

@implementation GTLRPlayMoviesQuery_AccountsOrdersList

@dynamic accountId, customId, name, pageSize, pageToken, pphNames, status,
         studioNames, videoIds;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"pphNames" : [NSString class],
    @"status" : [NSString class],
    @"studioNames" : [NSString class],
    @"videoIds" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithAccountId:(NSString *)accountId {
  NSArray *pathParams = @[ @"accountId" ];
  NSString *pathURITemplate = @"v1/accounts/{accountId}/orders";
  GTLRPlayMoviesQuery_AccountsOrdersList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.expectedObjectClass = [GTLRPlayMovies_ListOrdersResponse class];
  query.loggingName = @"playmoviespartner.accounts.orders.list";
  return query;
}

@end

@implementation GTLRPlayMoviesQuery_AccountsStoreInfosCountryGet

@dynamic accountId, country, videoId;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                           videoId:(NSString *)videoId
                           country:(NSString *)country {
  NSArray *pathParams = @[
    @"accountId", @"country", @"videoId"
  ];
  NSString *pathURITemplate = @"v1/accounts/{accountId}/storeInfos/{videoId}/country/{country}";
  GTLRPlayMoviesQuery_AccountsStoreInfosCountryGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.videoId = videoId;
  query.country = country;
  query.expectedObjectClass = [GTLRPlayMovies_StoreInfo class];
  query.loggingName = @"playmoviespartner.accounts.storeInfos.country.get";
  return query;
}

@end

@implementation GTLRPlayMoviesQuery_AccountsStoreInfosList

@dynamic accountId, countries, mids, name, pageSize, pageToken, pphNames,
         seasonIds, studioNames, videoId, videoIds;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"countries" : [NSString class],
    @"mids" : [NSString class],
    @"pphNames" : [NSString class],
    @"seasonIds" : [NSString class],
    @"studioNames" : [NSString class],
    @"videoIds" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithAccountId:(NSString *)accountId {
  NSArray *pathParams = @[ @"accountId" ];
  NSString *pathURITemplate = @"v1/accounts/{accountId}/storeInfos";
  GTLRPlayMoviesQuery_AccountsStoreInfosList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.expectedObjectClass = [GTLRPlayMovies_ListStoreInfosResponse class];
  query.loggingName = @"playmoviespartner.accounts.storeInfos.list";
  return query;
}

@end
