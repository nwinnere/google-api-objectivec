// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Cloud Service Registry API (serviceregistry/alpha)
// Description:
//   Manages service endpoints in Service Registry and provides integration with
//   DNS for service discovery and name resolution.
// Documentation:
//   https://cloud.google.com/service-registry/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRServiceRegistry_Endpoint;

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Service Registry query classes.
 */
@interface GTLRServiceRegistryQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(copy, nullable) NSString *fields;

@end

/**
 *  Deletes an endpoint.
 *
 *  Method: serviceregistry.endpoints.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeServiceRegistryCloudPlatform
 *    @c kGTLRAuthScopeServiceRegistryNdevCloudman
 */
@interface GTLRServiceRegistryQuery_EndpointsDelete : GTLRServiceRegistryQuery
// Previous library name was
//   +[GTLQueryServiceRegistry queryForEndpointsDeleteWithproject:endpoint:]

/** The name of the endpoint for this request. */
@property(copy, nullable) NSString *endpoint;

/** The project ID for this request. */
@property(copy, nullable) NSString *project;

/**
 *  Fetches a @c GTLRServiceRegistry_Operation.
 *
 *  Deletes an endpoint.
 *
 *  @param project The project ID for this request.
 *  @param endpoint The name of the endpoint for this request.
 *
 *  @returns GTLRServiceRegistryQuery_EndpointsDelete
 */
+ (instancetype)queryWithProject:(NSString *)project
                        endpoint:(NSString *)endpoint;

@end

/**
 *  Gets an endpoint.
 *
 *  Method: serviceregistry.endpoints.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeServiceRegistryCloudPlatform
 */
@interface GTLRServiceRegistryQuery_EndpointsGet : GTLRServiceRegistryQuery
// Previous library name was
//   +[GTLQueryServiceRegistry queryForEndpointsGetWithproject:endpoint:]

/** The name of the endpoint for this request. */
@property(copy, nullable) NSString *endpoint;

/** The project ID for this request. */
@property(copy, nullable) NSString *project;

/**
 *  Fetches a @c GTLRServiceRegistry_Endpoint.
 *
 *  Gets an endpoint.
 *
 *  @param project The project ID for this request.
 *  @param endpoint The name of the endpoint for this request.
 *
 *  @returns GTLRServiceRegistryQuery_EndpointsGet
 */
+ (instancetype)queryWithProject:(NSString *)project
                        endpoint:(NSString *)endpoint;

@end

/**
 *  Creates an endpoint.
 *
 *  Method: serviceregistry.endpoints.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeServiceRegistryCloudPlatform
 *    @c kGTLRAuthScopeServiceRegistryNdevCloudman
 */
@interface GTLRServiceRegistryQuery_EndpointsInsert : GTLRServiceRegistryQuery
// Previous library name was
//   +[GTLQueryServiceRegistry queryForEndpointsInsertWithObject:project:]

/** The project ID for this request. */
@property(copy, nullable) NSString *project;

/**
 *  Fetches a @c GTLRServiceRegistry_Operation.
 *
 *  Creates an endpoint.
 *
 *  @param object The @c GTLRServiceRegistry_Endpoint to include in the query.
 *  @param project The project ID for this request.
 *
 *  @returns GTLRServiceRegistryQuery_EndpointsInsert
 */
+ (instancetype)queryWithObject:(GTLRServiceRegistry_Endpoint *)object
                        project:(NSString *)project;

@end

/**
 *  Lists endpoints for a project.
 *
 *  Method: serviceregistry.endpoints.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeServiceRegistryCloudPlatform
 */
@interface GTLRServiceRegistryQuery_EndpointsList : GTLRServiceRegistryQuery
// Previous library name was
//   +[GTLQueryServiceRegistry queryForEndpointsListWithproject:]

/**
 *  Sets a filter expression for filtering listed resources, in the form
 *  filter={expression}. Your {expression} must be in the format: field_name
 *  comparison_string literal_string.
 *  The field_name is the name of the field you want to compare. Only atomic
 *  field types are supported (string, number, boolean). The comparison_string
 *  must be either eq (equals) or ne (not equals). The literal_string is the
 *  string value to filter to. The literal value must be valid for the type of
 *  field you are filtering by (string, number, boolean). For string fields, the
 *  literal value is interpreted as a regular expression using RE2 syntax. The
 *  literal value must match the entire field.
 *  For example, to filter for instances that do not have a name of
 *  example-instance, you would use filter=name ne example-instance.
 *  Compute Engine Beta API Only: When filtering in the Beta API, you can also
 *  filter on nested fields. For example, you could filter on instances that
 *  have set the scheduling.automaticRestart field to true. Use filtering on
 *  nested fields to take advantage of labels to organize and search for results
 *  based on label values.
 *  The Beta API also supports filtering on multiple expressions by providing
 *  each separate expression within parentheses. For example,
 *  (scheduling.automaticRestart eq true) (zone eq us-central1-f). Multiple
 *  expressions are treated as AND expressions, meaning that resources must
 *  match all expressions to pass the filters.
 */
@property(copy, nullable) NSString *filter;

/**
 *  The maximum number of results per page that should be returned. If the
 *  number of available results is larger than maxResults, Compute Engine
 *  returns a nextPageToken that can be used to get the next page of results in
 *  subsequent list requests.
 *
 *  @note If not set, the documented server-side default will be 500 (from the
 *        range 0..500).
 */
@property(assign) NSUInteger maxResults;

/**
 *  Sorts list results by a certain order. By default, results are returned in
 *  alphanumerical order based on the resource name.
 *  You can also sort results in descending order based on the creation
 *  timestamp using orderBy="creationTimestamp desc". This sorts results based
 *  on the creationTimestamp field in reverse chronological order (newest result
 *  first). Use this to sort resources like operations so that the newest
 *  operation is returned first.
 *  Currently, only sorting by name or creationTimestamp desc is supported.
 */
@property(copy, nullable) NSString *orderBy;

/**
 *  Specifies a page token to use. Set pageToken to the nextPageToken returned
 *  by a previous list request to get the next page of results.
 */
@property(copy, nullable) NSString *pageToken;

/** The project ID for this request. */
@property(copy, nullable) NSString *project;

/**
 *  Fetches a @c GTLRServiceRegistry_EndpointsListResponse.
 *
 *  Lists endpoints for a project.
 *
 *  @param project The project ID for this request.
 *
 *  @returns GTLRServiceRegistryQuery_EndpointsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithProject:(NSString *)project;

@end

/**
 *  Updates an endpoint. This method supports patch semantics.
 *
 *  Method: serviceregistry.endpoints.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeServiceRegistryCloudPlatform
 *    @c kGTLRAuthScopeServiceRegistryNdevCloudman
 */
@interface GTLRServiceRegistryQuery_EndpointsPatch : GTLRServiceRegistryQuery
// Previous library name was
//   +[GTLQueryServiceRegistry queryForEndpointsPatchWithObject:project:endpoint:]

/** The name of the endpoint for this request. */
@property(copy, nullable) NSString *endpoint;

/** The project ID for this request. */
@property(copy, nullable) NSString *project;

/**
 *  Fetches a @c GTLRServiceRegistry_Operation.
 *
 *  Updates an endpoint. This method supports patch semantics.
 *
 *  @param object The @c GTLRServiceRegistry_Endpoint to include in the query.
 *  @param project The project ID for this request.
 *  @param endpoint The name of the endpoint for this request.
 *
 *  @returns GTLRServiceRegistryQuery_EndpointsPatch
 */
+ (instancetype)queryWithObject:(GTLRServiceRegistry_Endpoint *)object
                        project:(NSString *)project
                       endpoint:(NSString *)endpoint;

@end

/**
 *  Updates an endpoint.
 *
 *  Method: serviceregistry.endpoints.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeServiceRegistryCloudPlatform
 *    @c kGTLRAuthScopeServiceRegistryNdevCloudman
 */
@interface GTLRServiceRegistryQuery_EndpointsUpdate : GTLRServiceRegistryQuery
// Previous library name was
//   +[GTLQueryServiceRegistry queryForEndpointsUpdateWithObject:project:endpoint:]

/** The name of the endpoint for this request. */
@property(copy, nullable) NSString *endpoint;

/** The project ID for this request. */
@property(copy, nullable) NSString *project;

/**
 *  Fetches a @c GTLRServiceRegistry_Operation.
 *
 *  Updates an endpoint.
 *
 *  @param object The @c GTLRServiceRegistry_Endpoint to include in the query.
 *  @param project The project ID for this request.
 *  @param endpoint The name of the endpoint for this request.
 *
 *  @returns GTLRServiceRegistryQuery_EndpointsUpdate
 */
+ (instancetype)queryWithObject:(GTLRServiceRegistry_Endpoint *)object
                        project:(NSString *)project
                       endpoint:(NSString *)endpoint;

@end

/**
 *  Gets information about a specific operation.
 *
 *  Method: serviceregistry.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeServiceRegistryCloudPlatform
 *    @c kGTLRAuthScopeServiceRegistryCloudPlatformReadOnly
 *    @c kGTLRAuthScopeServiceRegistryNdevCloudman
 *    @c kGTLRAuthScopeServiceRegistryNdevCloudmanReadonly
 */
@interface GTLRServiceRegistryQuery_OperationsGet : GTLRServiceRegistryQuery
// Previous library name was
//   +[GTLQueryServiceRegistry queryForOperationsGetWithproject:operation:]

/** The name of the operation for this request. */
@property(copy, nullable) NSString *operation;

/** The project ID for this request. */
@property(copy, nullable) NSString *project;

/**
 *  Fetches a @c GTLRServiceRegistry_Operation.
 *
 *  Gets information about a specific operation.
 *
 *  @param project The project ID for this request.
 *  @param operation The name of the operation for this request.
 *
 *  @returns GTLRServiceRegistryQuery_OperationsGet
 */
+ (instancetype)queryWithProject:(NSString *)project
                       operation:(NSString *)operation;

@end

/**
 *  Lists all operations for a project.
 *
 *  Method: serviceregistry.operations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeServiceRegistryCloudPlatform
 *    @c kGTLRAuthScopeServiceRegistryCloudPlatformReadOnly
 *    @c kGTLRAuthScopeServiceRegistryNdevCloudman
 *    @c kGTLRAuthScopeServiceRegistryNdevCloudmanReadonly
 */
@interface GTLRServiceRegistryQuery_OperationsList : GTLRServiceRegistryQuery
// Previous library name was
//   +[GTLQueryServiceRegistry queryForOperationsListWithproject:]

/**
 *  Sets a filter expression for filtering listed resources, in the form
 *  filter={expression}. Your {expression} must be in the format: field_name
 *  comparison_string literal_string.
 *  The field_name is the name of the field you want to compare. Only atomic
 *  field types are supported (string, number, boolean). The comparison_string
 *  must be either eq (equals) or ne (not equals). The literal_string is the
 *  string value to filter to. The literal value must be valid for the type of
 *  field you are filtering by (string, number, boolean). For string fields, the
 *  literal value is interpreted as a regular expression using RE2 syntax. The
 *  literal value must match the entire field.
 *  For example, to filter for instances that do not have a name of
 *  example-instance, you would use filter=name ne example-instance.
 *  Compute Engine Beta API Only: When filtering in the Beta API, you can also
 *  filter on nested fields. For example, you could filter on instances that
 *  have set the scheduling.automaticRestart field to true. Use filtering on
 *  nested fields to take advantage of labels to organize and search for results
 *  based on label values.
 *  The Beta API also supports filtering on multiple expressions by providing
 *  each separate expression within parentheses. For example,
 *  (scheduling.automaticRestart eq true) (zone eq us-central1-f). Multiple
 *  expressions are treated as AND expressions, meaning that resources must
 *  match all expressions to pass the filters.
 */
@property(copy, nullable) NSString *filter;

/**
 *  The maximum number of results per page that should be returned. If the
 *  number of available results is larger than maxResults, Compute Engine
 *  returns a nextPageToken that can be used to get the next page of results in
 *  subsequent list requests.
 *
 *  @note If not set, the documented server-side default will be 500 (from the
 *        range 0..500).
 */
@property(assign) NSUInteger maxResults;

/**
 *  Sorts list results by a certain order. By default, results are returned in
 *  alphanumerical order based on the resource name.
 *  You can also sort results in descending order based on the creation
 *  timestamp using orderBy="creationTimestamp desc". This sorts results based
 *  on the creationTimestamp field in reverse chronological order (newest result
 *  first). Use this to sort resources like operations so that the newest
 *  operation is returned first.
 *  Currently, only sorting by name or creationTimestamp desc is supported.
 */
@property(copy, nullable) NSString *orderBy;

/**
 *  Specifies a page token to use. Set pageToken to the nextPageToken returned
 *  by a previous list request to get the next page of results.
 */
@property(copy, nullable) NSString *pageToken;

/** The project ID for this request. */
@property(copy, nullable) NSString *project;

/**
 *  Fetches a @c GTLRServiceRegistry_OperationsListResponse.
 *
 *  Lists all operations for a project.
 *
 *  @param project The project ID for this request.
 *
 *  @returns GTLRServiceRegistryQuery_OperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithProject:(NSString *)project;

@end

NS_ASSUME_NONNULL_END
