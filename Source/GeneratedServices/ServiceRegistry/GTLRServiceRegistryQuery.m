// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Cloud Service Registry API (serviceregistry/alpha)
// Description:
//   Manages service endpoints in Service Registry and provides integration with
//   DNS for service discovery and name resolution.
// Documentation:
//   https://cloud.google.com/service-registry/

#import "GTLRServiceRegistryQuery.h"

#import "GTLRServiceRegistryObjects.h"

@implementation GTLRServiceRegistryQuery

@dynamic fields;

@end

@implementation GTLRServiceRegistryQuery_EndpointsDelete

@dynamic endpoint, project;

+ (instancetype)queryWithProject:(NSString *)project
                        endpoint:(NSString *)endpoint {
  NSArray *pathParams = @[
    @"endpoint", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/endpoints/{endpoint}";
  GTLRServiceRegistryQuery_EndpointsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.project = project;
  query.endpoint = endpoint;
  query.expectedObjectClass = [GTLRServiceRegistry_Operation class];
  query.loggingName = @"serviceregistry.endpoints.delete";
  return query;
}

@end

@implementation GTLRServiceRegistryQuery_EndpointsGet

@dynamic endpoint, project;

+ (instancetype)queryWithProject:(NSString *)project
                        endpoint:(NSString *)endpoint {
  NSArray *pathParams = @[
    @"endpoint", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/endpoints/{endpoint}";
  GTLRServiceRegistryQuery_EndpointsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.endpoint = endpoint;
  query.expectedObjectClass = [GTLRServiceRegistry_Endpoint class];
  query.loggingName = @"serviceregistry.endpoints.get";
  return query;
}

@end

@implementation GTLRServiceRegistryQuery_EndpointsInsert

@dynamic project;

+ (instancetype)queryWithObject:(GTLRServiceRegistry_Endpoint *)object
                        project:(NSString *)project {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/global/endpoints";
  GTLRServiceRegistryQuery_EndpointsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.expectedObjectClass = [GTLRServiceRegistry_Operation class];
  query.loggingName = @"serviceregistry.endpoints.insert";
  return query;
}

@end

@implementation GTLRServiceRegistryQuery_EndpointsList

@dynamic filter, maxResults, orderBy, pageToken, project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/global/endpoints";
  GTLRServiceRegistryQuery_EndpointsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRServiceRegistry_EndpointsListResponse class];
  query.loggingName = @"serviceregistry.endpoints.list";
  return query;
}

@end

@implementation GTLRServiceRegistryQuery_EndpointsPatch

@dynamic endpoint, project;

+ (instancetype)queryWithObject:(GTLRServiceRegistry_Endpoint *)object
                        project:(NSString *)project
                       endpoint:(NSString *)endpoint {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"endpoint", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/endpoints/{endpoint}";
  GTLRServiceRegistryQuery_EndpointsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.endpoint = endpoint;
  query.expectedObjectClass = [GTLRServiceRegistry_Operation class];
  query.loggingName = @"serviceregistry.endpoints.patch";
  return query;
}

@end

@implementation GTLRServiceRegistryQuery_EndpointsUpdate

@dynamic endpoint, project;

+ (instancetype)queryWithObject:(GTLRServiceRegistry_Endpoint *)object
                        project:(NSString *)project
                       endpoint:(NSString *)endpoint {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"endpoint", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/endpoints/{endpoint}";
  GTLRServiceRegistryQuery_EndpointsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.endpoint = endpoint;
  query.expectedObjectClass = [GTLRServiceRegistry_Operation class];
  query.loggingName = @"serviceregistry.endpoints.update";
  return query;
}

@end

@implementation GTLRServiceRegistryQuery_OperationsGet

@dynamic operation, project;

+ (instancetype)queryWithProject:(NSString *)project
                       operation:(NSString *)operation {
  NSArray *pathParams = @[
    @"operation", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/operations/{operation}";
  GTLRServiceRegistryQuery_OperationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.operation = operation;
  query.expectedObjectClass = [GTLRServiceRegistry_Operation class];
  query.loggingName = @"serviceregistry.operations.get";
  return query;
}

@end

@implementation GTLRServiceRegistryQuery_OperationsList

@dynamic filter, maxResults, orderBy, pageToken, project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/global/operations";
  GTLRServiceRegistryQuery_OperationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRServiceRegistry_OperationsListResponse class];
  query.loggingName = @"serviceregistry.operations.list";
  return query;
}

@end
